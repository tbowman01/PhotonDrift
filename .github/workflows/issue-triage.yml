name: Enhanced Intelligent Issue Triage

on:
  issues:
    types: [opened, edited, labeled, unlabeled]
  workflow_dispatch:
    inputs:
      auto_label:
        description: 'Automatically apply labels'
        required: false
        default: 'true'
        type: boolean
      auto_assign:
        description: 'Automatically assign issues'
        required: false
        default: 'false'
        type: boolean
      confidence_threshold:
        description: 'Minimum confidence for auto-labeling (0.0-1.0)'
        required: false
        default: '0.7'
        type: string

permissions:
  issues: write
  contents: read
  pull-requests: read

jobs:
  swarm-triage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install @octokit/rest

      - name: Initialize Claude Flow Swarm
        run: |
          # Initialize swarm coordination for intelligent triage
          echo "🐝 Initializing Claude Flow Swarm for Issue Triage"
          echo "Repository: ${{ github.repository }}"
          echo "Event: ${{ github.event_name }}"
          echo "Issue: #${{ github.event.issue.number || 'bulk-process' }}"

      - name: Setup Swarm Intelligence
        uses: actions/github-script@v7
        id: swarm-setup
        with:
          script: |
            console.log('🤖 Setting up intelligent triage swarm...');
            
            // Swarm configuration for triage
            const swarmConfig = {
              topology: 'hierarchical',
              agents: [
                { id: 'classifier', type: 'analytical', role: 'issue-classification' },
                { id: 'prioritizer', type: 'critical', role: 'priority-assessment' },
                { id: 'matcher', type: 'systems', role: 'team-assignment' },
                { id: 'validator', type: 'convergent', role: 'quality-assurance' }
              ],
              coordination: 'memory-shared',
              learning: true
            };
            
            core.setOutput('swarm_config', JSON.stringify(swarmConfig));
            console.log('Swarm configured with', swarmConfig.agents.length, 'specialized agents');

      - name: Enhanced AI Classification
        uses: actions/github-script@v7
        id: classify
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            if (!issue) return;

            const title = issue.title || '';
            const body = issue.body || '';
            const labels = issue.labels.map(l => l.name);
            const confidenceThreshold = parseFloat('${{ github.event.inputs.confidence_threshold || "0.7" }}');

            // Advanced classification patterns with confidence scoring
            const patterns = {
              bug: {
                title: [/\[BUG\]/i, /bug/i, /error/i, /broken/i, /fix/i, /crash/i, /fail/i],
                body: [/error/i, /broken/i, /doesn't work/i, /fails/i, /exception/i, /crash/i, /stacktrace/i],
                weight: 0.8,
                indicators: [/reproduction steps/i, /expected behavior/i, /actual behavior/i]
              },
              security: {
                title: [/security/i, /vulnerability/i, /CVE/i, /exploit/i, /unsafe/i, /XSS/i, /injection/i],
                body: [/security/i, /vulnerability/i, /CVE-/i, /exploit/i, /unsafe/i, /attack/i, /malicious/i],
                weight: 1.0,  // Highest priority
                indicators: [/security impact/i, /attack vector/i, /disclosure/i]
              },
              performance: {
                title: [/performance/i, /slow/i, /optimization/i, /memory/i, /speed/i, /latency/i],
                body: [/performance/i, /slow/i, /optimization/i, /memory leak/i, /bottleneck/i, /timeout/i],
                weight: 0.7,
                indicators: [/benchmark/i, /profiling/i, /metrics/i]
              },
              dependencies: {
                title: [/dependency/i, /package/i, /update/i, /renovate/i, /deps/i, /npm/i, /cargo/i],
                body: [/dependency/i, /package/i, /update/i, /version/i, /upgrade/i, /outdated/i],
                weight: 0.5,
                indicators: [/security advisory/i, /breaking changes/i, /compatibility/i]
              },
              feature: {
                title: [/\[PHASE/i, /feature/i, /enhancement/i, /add/i, /implement/i, /support/i],
                body: [/feature/i, /enhancement/i, /new/i, /implement/i, /add/i, /support/i],
                weight: 0.6,
                indicators: [/user story/i, /acceptance criteria/i, /requirements/i]
              },
              documentation: {
                title: [/report/i, /analysis/i, /docs/i, /documentation/i, /guide/i, /readme/i],
                body: [/report/i, /analysis/i, /documentation/i, /readme/i, /guide/i, /tutorial/i],
                weight: 0.4,
                indicators: [/documentation/i, /examples/i, /clarification/i]
              },
              ci_cd: {
                title: [/CI/i, /CD/i, /pipeline/i, /workflow/i, /action/i, /build/i, /deploy/i],
                body: [/pipeline/i, /workflow/i, /github action/i, /build/i, /deploy/i, /automation/i],
                weight: 0.6,
                indicators: [/workflow/i, /automation/i, /integration/i]
              }
            };

            function calculateConfidence(title, body, config) {
              let score = 0;
              let matches = 0;
              const text = `${title} ${body}`.toLowerCase();

              // Title patterns (higher weight)
              for (const pattern of config.title) {
                if (pattern.test(title)) {
                  score += 0.4 * config.weight;
                  matches++;
                }
              }

              // Body patterns
              for (const pattern of config.body) {
                if (pattern.test(body)) {
                  score += 0.3 * config.weight;
                  matches++;
                }
              }

              // Special indicators (bonus points)
              for (const indicator of config.indicators || []) {
                if (indicator.test(text)) {
                  score += 0.2 * config.weight;
                  matches++;
                }
              }

              return { score: Math.min(score, 1.0), matches };
            }

            // Enhanced classification with confidence scoring
            function classifyIssueType(title, body) {
              const results = [];
              
              for (const [type, config] of Object.entries(patterns)) {
                const { score, matches } = calculateConfidence(title, body, config);
                if (matches > 0) {
                  results.push({ type, confidence: score, matches });
                }
              }

              // Sort by confidence and return top result
              results.sort((a, b) => b.confidence - a.confidence);
              return results.length > 0 ? results[0] : { type: 'needs-triage', confidence: 0, matches: 0 };
            }

            // Enhanced priority determination with multi-factor analysis
            function determinePriority(title, body, labels, classification) {
              if (labels.some(l => l.includes('priority-'))) return { priority: null, confidence: 0 };
              
              const text = `${title} ${body}`.toLowerCase();
              let score = 0;
              let factors = [];

              // Security issues are always critical
              if (classification.type === 'security' && classification.confidence > 0.6) {
                return { priority: 'critical', confidence: 0.95, factors: ['security-issue'] };
              }

              // Critical keywords
              if (/critical|emergency|urgent|blocking|production down/i.test(text)) {
                score += 0.8;
                factors.push('critical-keywords');
              }

              // Phase 3 features (high priority)
              if (/\[PHASE 3\]/i.test(title)) {
                score += 0.7;
                factors.push('phase-3-feature');
              }

              // Bug severity
              if (classification.type === 'bug') {
                if (/crash|data loss|corruption/i.test(text)) {
                  score += 0.8;
                  factors.push('severe-bug');
                } else if (/workaround|minor/i.test(text)) {
                  score -= 0.3;
                  factors.push('minor-bug');
                }
              }

              // Performance impact
              if (/slow|timeout|memory leak|high cpu/i.test(text)) {
                score += 0.5;
                factors.push('performance-impact');
              }

              // User impact indicators
              if (/user|customer|production|breaking/i.test(text)) {
                score += 0.4;
                factors.push('user-impact');
              }

              // Determine priority from score
              let priority;
              if (score >= 0.8) priority = 'critical';
              else if (score >= 0.6) priority = 'high';
              else if (score >= 0.3) priority = 'medium';
              else priority = 'low';

              return { priority, confidence: Math.min(score, 1.0), factors };
            }

            // Enhanced team assignment with expertise mapping
            function suggestAssignee(type, title, body, priority) {
              const text = `${title} ${body}`.toLowerCase();
              const assignments = [];

              const teamMap = {
                'security': { teams: ['security-team', 'architecture-lead'], confidence: 0.9 },
                'bug': { teams: ['rust-team', 'core-developers'], confidence: 0.8 },
                'dependencies': { teams: ['maintenance-team', 'rust-team'], confidence: 0.7 },
                'performance': { teams: ['performance-team', 'optimization-experts'], confidence: 0.8 },
                'ci_cd': { teams: ['devops-team', 'automation-engineers'], confidence: 0.85 }
              };

              // Feature assignment based on content
              if (type === 'feature') {
                if (/wasm|webassembly/i.test(text)) {
                  assignments.push({ teams: ['wasm-specialist', 'rust-team'], confidence: 0.9, reason: 'wasm-expertise' });
                } else if (/ci|cd|pipeline|workflow/i.test(text)) {
                  assignments.push({ teams: ['devops-team', 'automation-engineers'], confidence: 0.85, reason: 'cicd-expertise' });
                } else if (/core|engine|algorithm/i.test(text)) {
                  assignments.push({ teams: ['core-developers', 'rust-team'], confidence: 0.8, reason: 'core-expertise' });
                } else {
                  assignments.push({ teams: ['dev-team', 'feature-team'], confidence: 0.6, reason: 'general-feature' });
                }
              } else if (teamMap[type]) {
                assignments.push({ ...teamMap[type], reason: `type-${type}` });
              } else {
                assignments.push({ teams: ['triage-team'], confidence: 0.4, reason: 'needs-triage' });
              }

              // Priority-based escalation
              if (priority === 'critical') {
                assignments.forEach(a => {
                  a.teams.unshift('leads-team');
                  a.confidence = Math.min(a.confidence + 0.1, 1.0);
                });
              }

              return assignments[0] || { teams: ['triage-team'], confidence: 0.3, reason: 'fallback' };
            }

            // Perform enhanced classification
            const classification = classifyIssueType(title, body);
            const priorityResult = determinePriority(title, body, labels, classification);
            const assignment = suggestAssignee(classification.type, title, body, priorityResult.priority);

            // Component detection
            const components = [];
            const componentMap = {
              'component-cli': [/CLI/i, /command line/i, /terminal/i],
              'component-core': [/core/i, /engine/i, /algorithm/i, /detection/i],
              'component-wasm': [/WASM/i, /WebAssembly/i, /wasm/i],
              'component-github-action': [/github action/i, /workflow/i, /CI/i, /CD/i],
              'component-docs': [/docs/i, /documentation/i, /readme/i, /guide/i],
              'component-tests': [/test/i, /testing/i, /spec/i, /unit test/i]
            };

            for (const [component, patterns] of Object.entries(componentMap)) {
              for (const pattern of patterns) {
                if (pattern.test(`${title} ${body}`)) {
                  components.push(component);
                  break;
                }
              }
            }

            // Store comprehensive results
            const results = {
              type: classification.type,
              confidence: classification.confidence,
              matches: classification.matches,
              priority: priorityResult.priority,
              priorityConfidence: priorityResult.confidence,
              priorityFactors: priorityResult.factors,
              suggestedTeams: assignment.teams,
              assignmentConfidence: assignment.confidence,
              assignmentReason: assignment.reason,
              components: components,
              meetsThreshold: classification.confidence >= confidenceThreshold
            };

            // Set outputs
            for (const [key, value] of Object.entries(results)) {
              core.setOutput(key, Array.isArray(value) ? value.join(',') : String(value));
            }

            console.log(`🎯 Enhanced Classification Results for Issue #${issue.number}:`);
            console.log(`  Type: ${results.type} (${(results.confidence * 100).toFixed(1)}% confidence)`);
            console.log(`  Priority: ${results.priority} (${(results.priorityConfidence * 100).toFixed(1)}% confidence)`);
            console.log(`  Teams: ${results.suggestedTeams.join(', ')} (${results.assignmentReason})`);
            console.log(`  Components: ${results.components.join(', ') || 'none'}`);
            console.log(`  Meets Threshold: ${results.meetsThreshold ? '✅' : '❌'} (>${(confidenceThreshold * 100).toFixed(1)}%)`);

            return results;

      - name: Apply Labels
        if: ${{ github.event.inputs.auto_label == 'true' || github.event_name == 'issues' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            if (!issue) return;

            const issueType = '${{ steps.classify.outputs.issue_type }}';
            const priority = '${{ steps.classify.outputs.priority }}';
            const currentLabels = issue.labels.map(l => l.name);

            const labelsToAdd = [];
            const labelsToRemove = [];

            // Type labels
            const typeLabels = {
              'bug': 'bug',
              'security': 'security',
              'performance': 'performance',
              'dependencies': 'dependencies',
              'feature': 'type-feature',
              'documentation': 'documentation'
            };

            if (issueType !== 'needs-triage' && typeLabels[issueType]) {
              if (!currentLabels.includes(typeLabels[issueType])) {
                labelsToAdd.push(typeLabels[issueType]);
              }
              
              // Remove needs-triage if we classified it
              if (currentLabels.includes('needs-triage')) {
                labelsToRemove.push('needs-triage');
              }
            }

            // Priority labels
            if (priority && !currentLabels.some(l => l.startsWith('priority-'))) {
              labelsToAdd.push(`priority-${priority}`);
            }

            // Apply label changes
            if (labelsToAdd.length > 0) {
              console.log(`Adding labels: ${labelsToAdd.join(', ')}`);
              await github.rest.issues.addLabels({
                ...context.repo,
                issue_number: issue.number,
                labels: labelsToAdd
              });
            }

            if (labelsToRemove.length > 0) {
              console.log(`Removing labels: ${labelsToRemove.join(', ')}`);
              for (const label of labelsToRemove) {
                try {
                  await github.rest.issues.removeLabel({
                    ...context.repo,
                    issue_number: issue.number,
                    name: label
                  });
                } catch (e) {
                  console.log(`Failed to remove label ${label}: ${e.message}`);
                }
              }
            }

      - name: Post Triage Comment
        if: ${{ github.event.action == 'opened' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const issueType = '${{ steps.classify.outputs.issue_type }}';
            const priority = '${{ steps.classify.outputs.priority }}';
            const suggestedAssignees = '${{ steps.classify.outputs.suggested_assignees }}'.split(',');

            const typeEmojis = {
              'bug': '🐛',
              'security': '🔒',
              'performance': '📊',
              'dependencies': '📦',
              'feature': '✨',
              'documentation': '📝',
              'needs-triage': '🔍'
            };

            const priorityEmojis = {
              'high': '🔴',
              'medium': '🟡',
              'low': '🟢'
            };

            const message = `## 🤖 Automated Issue Triage

Thank you for creating this issue! Our intelligent triage system has analyzed it:

**Classification:**
- **Type:** ${typeEmojis[issueType] || '❓'} ${issueType}
- **Priority:** ${priorityEmojis[priority] || '⚪'} ${priority || 'to be determined'}
- **Suggested Team:** ${suggestedAssignees.join(', ')}

**Next Steps:**
1. A maintainer will review this issue soon
2. Additional labels may be applied based on further analysis
3. The issue will be assigned to the appropriate team member

If you believe this classification is incorrect, please add a comment explaining why.`;

            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: issue.number,
              body: message
            });

      - name: Check for Security Issues
        if: ${{ steps.classify.outputs.issue_type == 'security' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Add security label and alert team
            console.log('⚠️ Security issue detected - alerting security team');
            
            // In a real scenario, you might:
            // - Send notifications to security team
            // - Create a private security advisory
            // - Add to security tracking project