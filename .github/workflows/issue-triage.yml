name: Intelligent Issue Triage

on:
  issues:
    types: [opened, edited, labeled, unlabeled]
  workflow_dispatch:
    inputs:
      auto_label:
        description: 'Automatically apply labels'
        required: false
        default: 'true'
        type: boolean
      auto_assign:
        description: 'Automatically assign issues'
        required: false
        default: 'false'
        type: boolean

permissions:
  issues: write
  contents: read

jobs:
  triage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup GitHub CLI
        uses: actions/github-script@v7
        id: setup
        with:
          script: |
            console.log('Setting up issue triage...');

      - name: Classify Issue
        uses: actions/github-script@v7
        id: classify
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            if (!issue) return;

            const title = issue.title || '';
            const body = issue.body || '';
            const labels = issue.labels.map(l => l.name);

            // Classification logic
            function classifyIssueType(title, body) {
              if (/\[BUG\]/.test(title) || /bug|error|broken|fix/i.test(body)) {
                return 'bug';
              } else if (/security|vulnerability|CVE/i.test(title + ' ' + body)) {
                return 'security';
              } else if (/performance|slow|optimization/i.test(title + ' ' + body)) {
                return 'performance';
              } else if (/dependency|package|update/i.test(title + ' ' + body)) {
                return 'dependencies';
              } else if (/\[PHASE/.test(title) || /feature/i.test(title)) {
                return 'feature';
              } else if (/report|analysis/i.test(title)) {
                return 'documentation';
              }
              return 'needs-triage';
            }

            // Priority determination
            function determinePriority(title, body, labels) {
              if (labels.some(l => l.includes('priority-'))) return null;
              
              if (/security|vulnerability|CVE/i.test(body)) {
                return 'high';
              } else if (/\[PHASE 3\]/.test(title)) {
                return 'high';
              } else if (/\[BUG\]/.test(title) && /critical|blocking|urgent/i.test(body)) {
                return 'high';
              } else if (/performance|slow/i.test(body)) {
                return 'medium';
              } else if (/\[Roadmap\]/.test(title) || /future|enhancement/i.test(body)) {
                return 'low';
              }
              return 'medium';
            }

            // Assignee suggestion
            function suggestAssignee(type, title) {
              const assigneeMap = {
                'security': ['security-team'],
                'bug': ['rust-team'],
                'dependencies': ['rust-team', 'maintenance-team'],
                'performance': ['performance-team'],
                'feature': title.includes('WASM') ? ['wasm-specialist'] : 
                          title.includes('CI') || title.includes('CD') ? ['devops-team'] : 
                          ['dev-team']
              };
              return assigneeMap[type] || ['triage-team'];
            }

            const issueType = classifyIssueType(title, body);
            const priority = determinePriority(title, body, labels);
            const suggestedAssignees = suggestAssignee(issueType, title);

            // Store results
            core.setOutput('issue_type', issueType);
            core.setOutput('priority', priority);
            core.setOutput('suggested_assignees', suggestedAssignees.join(','));

            console.log(`Issue #${issue.number} classified:`, {
              type: issueType,
              priority: priority,
              suggestedAssignees: suggestedAssignees
            });

      - name: Apply Labels
        if: ${{ github.event.inputs.auto_label == 'true' || github.event_name == 'issues' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            if (!issue) return;

            const issueType = '${{ steps.classify.outputs.issue_type }}';
            const priority = '${{ steps.classify.outputs.priority }}';
            const currentLabels = issue.labels.map(l => l.name);

            const labelsToAdd = [];
            const labelsToRemove = [];

            // Type labels
            const typeLabels = {
              'bug': 'bug',
              'security': 'security',
              'performance': 'performance',
              'dependencies': 'dependencies',
              'feature': 'type-feature',
              'documentation': 'documentation'
            };

            if (issueType !== 'needs-triage' && typeLabels[issueType]) {
              if (!currentLabels.includes(typeLabels[issueType])) {
                labelsToAdd.push(typeLabels[issueType]);
              }
              
              // Remove needs-triage if we classified it
              if (currentLabels.includes('needs-triage')) {
                labelsToRemove.push('needs-triage');
              }
            }

            // Priority labels
            if (priority && !currentLabels.some(l => l.startsWith('priority-'))) {
              labelsToAdd.push(`priority-${priority}`);
            }

            // Apply label changes
            if (labelsToAdd.length > 0) {
              console.log(`Adding labels: ${labelsToAdd.join(', ')}`);
              await github.rest.issues.addLabels({
                ...context.repo,
                issue_number: issue.number,
                labels: labelsToAdd
              });
            }

            if (labelsToRemove.length > 0) {
              console.log(`Removing labels: ${labelsToRemove.join(', ')}`);
              for (const label of labelsToRemove) {
                try {
                  await github.rest.issues.removeLabel({
                    ...context.repo,
                    issue_number: issue.number,
                    name: label
                  });
                } catch (e) {
                  console.log(`Failed to remove label ${label}: ${e.message}`);
                }
              }
            }

      - name: Post Triage Comment
        if: ${{ github.event.action == 'opened' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const issueType = '${{ steps.classify.outputs.issue_type }}';
            const priority = '${{ steps.classify.outputs.priority }}';
            const suggestedAssignees = '${{ steps.classify.outputs.suggested_assignees }}'.split(',');

            const typeEmojis = {
              'bug': '🐛',
              'security': '🔒',
              'performance': '📊',
              'dependencies': '📦',
              'feature': '✨',
              'documentation': '📝',
              'needs-triage': '🔍'
            };

            const priorityEmojis = {
              'high': '🔴',
              'medium': '🟡',
              'low': '🟢'
            };

            const message = `## 🤖 Automated Issue Triage

Thank you for creating this issue! Our intelligent triage system has analyzed it:

**Classification:**
- **Type:** ${typeEmojis[issueType] || '❓'} ${issueType}
- **Priority:** ${priorityEmojis[priority] || '⚪'} ${priority || 'to be determined'}
- **Suggested Team:** ${suggestedAssignees.join(', ')}

**Next Steps:**
1. A maintainer will review this issue soon
2. Additional labels may be applied based on further analysis
3. The issue will be assigned to the appropriate team member

If you believe this classification is incorrect, please add a comment explaining why.`;

            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: issue.number,
              body: message
            });

      - name: Check for Security Issues
        if: ${{ steps.classify.outputs.issue_type == 'security' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Add security label and alert team
            console.log('⚠️ Security issue detected - alerting security team');
            
            // In a real scenario, you might:
            // - Send notifications to security team
            // - Create a private security advisory
            // - Add to security tracking project