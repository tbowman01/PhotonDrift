name: Deploy Documentation

on:
  push:
    branches: [main, develop]
    paths: 
      - 'docs/**'
      - 'docs-site/**'
      - 'scripts/docs-*.js'
      - 'scripts/cli-docs-*.js'
      - 'scripts/link-validator.js'
  pull_request:
    branches: [main, develop]
    paths:
      - 'docs/**'
      - 'docs-site/**'
      - 'scripts/docs-*.js'
      - 'scripts/cli-docs-*.js'
      - 'scripts/link-validator.js'
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deployment target'
        required: false
        default: 'github-pages'
        type: choice
        options:
          - github-pages
          - netlify
          - both
      skip_validation:
        description: 'Skip link validation'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  RUST_VERSION: '1.75'

jobs:
  # Job 1: Build and validate documentation
  build-and-validate:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    outputs:
      docs-changed: ${{ steps.changes.outputs.docs }}
      site-built: ${{ steps.build.outcome == 'success' }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for git log in docs sync
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: docs-site/package-lock.json
          
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          profile: minimal
          override: true
          
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Detect documentation changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PRs, check if docs or docs-site files changed
            if git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -E "(docs/|docs-site/|scripts/.*docs)" > /dev/null; then
              echo "docs=true" >> $GITHUB_OUTPUT
            else
              echo "docs=false" >> $GITHUB_OUTPUT
            fi
          else
            # For pushes, always build docs
            echo "docs=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Install documentation dependencies
        if: steps.changes.outputs.docs == 'true'
        working-directory: docs-site
        run: |
          npm ci
          echo "Dependencies installed successfully"
          
      - name: Build Rust CLI for docs generation
        if: steps.changes.outputs.docs == 'true'
        run: |
          echo "Building Rust CLI for documentation generation..."
          cargo build --bin adrscan
          echo "CLI built successfully at $(pwd)/target/debug/adrscan"
          
      - name: Sync documentation content
        if: steps.changes.outputs.docs == 'true'
        run: |
          echo "Starting documentation synchronization..."
          node scripts/docs-sync.js --verbose
          echo "Documentation sync completed"
          
      - name: Generate CLI documentation
        if: steps.changes.outputs.docs == 'true'
        run: |
          echo "Generating CLI documentation..."
          node scripts/cli-docs-generator.js --verbose
          echo "CLI documentation generated"
          
      - name: Validate documentation links
        if: steps.changes.outputs.docs == 'true' && github.event.inputs.skip_validation != 'true'
        run: |
          echo "Validating documentation links..."
          node scripts/link-validator.js --verbose --external
          echo "Link validation completed"
          
      - name: Build documentation site
        id: build
        if: steps.changes.outputs.docs == 'true'
        working-directory: docs-site
        run: |
          echo "Building Docusaurus site..."
          npm run build
          echo "Site built successfully"
          
          # Verify build output
          if [ ! -d "build" ]; then
            echo "❌ Build directory not found"
            exit 1
          fi
          
          # Check for essential files
          if [ ! -f "build/index.html" ]; then
            echo "❌ Index file not found"
            exit 1
          fi
          
          echo "✅ Build verification passed"
          
      - name: Upload build artifacts
        if: steps.changes.outputs.docs == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: documentation-build
          path: docs-site/build/
          retention-days: 30
          
      - name: Upload validation reports
        if: steps.changes.outputs.docs == 'true' && always()
        uses: actions/upload-artifact@v3
        with:
          name: validation-reports
          path: |
            link-validation-report.json
            docs-sync-report.json
          retention-days: 7
          if-no-files-found: ignore

  # Job 2: Deploy to GitHub Pages (production)
  deploy-github-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-and-validate
    if: |
      needs.build-and-validate.outputs.site-built == 'true' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') &&
      (github.event.inputs.deploy_target == 'github-pages' || github.event.inputs.deploy_target == 'both' || github.event.inputs.deploy_target == '')
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    permissions:
      contents: read
      pages: write
      id-token: write
      
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: documentation-build
          path: ./build
          
      - name: Setup Pages
        uses: actions/configure-pages@v3
        
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./build
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  # Job 3: Deploy preview to Netlify (for PRs)
  deploy-netlify-preview:
    name: Deploy Netlify Preview
    runs-on: ubuntu-latest
    needs: build-and-validate
    if: |
      needs.build-and-validate.outputs.site-built == 'true' &&
      github.event_name == 'pull_request' &&
      (github.event.inputs.deploy_target == 'netlify' || github.event.inputs.deploy_target == 'both' || github.event.inputs.deploy_target == '')
      
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: documentation-build
          path: ./build
          
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: './build'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: |
            Deploy from GitHub Actions
            Commit: ${{ github.sha }}
            PR: #${{ github.event.number }}
          alias: deploy-preview-${{ github.event.number }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # Job 4: Performance and accessibility testing
  performance-test:
    name: Performance & Accessibility Test
    runs-on: ubuntu-latest
    needs: build-and-validate
    if: needs.build-and-validate.outputs.site-built == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: documentation-build
          path: ./build
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli
        
      - name: Serve site locally
        run: |
          npx serve ./build -l 3000 &
          sleep 5
          
      - name: Run Lighthouse CI
        run: |
          lhci autorun --upload.target=temporary-public-storage
        env:
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
          LHCI_BUILD_CONTEXT__COMMIT_TIME: ${{ github.event.head_commit.timestamp }}
          LHCI_BUILD_CONTEXT__CURRENT_BRANCH: ${{ github.ref_name }}
          LHCI_BUILD_CONTEXT__COMMIT_MESSAGE: ${{ github.event.head_commit.message }}

  # Job 5: Update search index (Algolia)
  update-search-index:
    name: Update Search Index
    runs-on: ubuntu-latest
    needs: [deploy-github-pages]
    if: needs.deploy-github-pages.result == 'success' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: documentation-build
          path: ./build
          
      - name: Update Algolia search index
        uses: signcl/docsearch-scraper-action@master
        env:
          APPLICATION_ID: ${{ secrets.ALGOLIA_APP_ID }}
          API_KEY: ${{ secrets.ALGOLIA_API_KEY }}
          CONFIG: |
            {
              "index_name": "photondrift-docs",
              "start_urls": ["https://docs.photondrift.dev/"],
              "sitemap_urls": ["https://docs.photondrift.dev/sitemap.xml"],
              "sitemap_alternate_links": true,
              "stop_urls": ["/tests"],
              "selectors": {
                "lvl0": {
                  "selector": "(//ul[contains(@class,'menu__list')]//a[contains(@class, 'menu__link menu__link--sublist menu__link--active')]/text() | //nav[contains(@class, 'navbar')]//a[contains(@class, 'navbar__link--active')]/text())[last()]",
                  "type": "xpath",
                  "global": true,
                  "default_value": "Documentation"
                },
                "lvl1": "header h1",
                "lvl2": "article h2",
                "lvl3": "article h3",
                "lvl4": "article h4",
                "lvl5": "article h5, article td:first-child",
                "lvl6": "article h6",
                "text": "article p, article li, article td:last-child"
              },
              "strip_chars": " .,;:#",
              "custom_settings": {
                "separatorsToIndex": "_",
                "attributesForFaceting": ["language", "version", "type", "docusaurus_tag"],
                "attributesToRetrieve": ["hierarchy", "content", "anchor", "url", "url_without_anchor", "type"]
              }
            }

  # Job 6: Notify deployment status
  notify-status:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-validate, deploy-github-pages, deploy-netlify-preview, performance-test]
    if: always()
    
    steps:
      - name: Create deployment summary
        run: |
          echo "# 📚 Documentation Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔨 Build Status" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build-and-validate.result }}" == "success" ]]; then
            echo "✅ **Build**: Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Deployment Status" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-github-pages.result }}" == "success" ]]; then
            echo "✅ **GitHub Pages**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
            echo "🔗 **URL**: https://docs.photondrift.dev" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-github-pages.result }}" == "skipped" ]]; then
            echo "⏭️ **GitHub Pages**: Skipped (not main/develop branch)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **GitHub Pages**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.deploy-netlify-preview.result }}" == "success" ]]; then
            echo "✅ **Netlify Preview**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-netlify-preview.result }}" == "skipped" ]]; then
            echo "⏭️ **Netlify Preview**: Skipped (not a pull request)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Netlify Preview**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Quality Checks" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.performance-test.result }}" == "success" ]]; then
            echo "✅ **Performance**: All checks passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.performance-test.result }}" == "skipped" ]]; then
            echo "⏭️ **Performance**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Performance**: Some checks failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- 📖 [Documentation](https://docs.photondrift.dev)" >> $GITHUB_STEP_SUMMARY
          echo "- 🏠 [Repository](https://github.com/tbowman01/PhotonDrift)" >> $GITHUB_STEP_SUMMARY
          echo "- 🐛 [Issues](https://github.com/tbowman01/PhotonDrift/issues)" >> $GITHUB_STEP_SUMMARY
          echo "- 💬 [Discussions](https://github.com/tbowman01/PhotonDrift/discussions)" >> $GITHUB_STEP_SUMMARY