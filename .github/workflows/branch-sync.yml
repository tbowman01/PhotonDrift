name: 🔄 Branch Synchronization

on:
  schedule:
    - cron: '0 1 * * 1'  # Weekly on Monday at 1 AM
  workflow_dispatch:
    inputs:
      sync_direction:
        description: 'Synchronization direction'
        required: true
        default: 'main_to_develop'
        type: choice
        options:
          - main_to_develop
          - develop_to_main
          - bidirectional
      create_pr:
        description: 'Create PR instead of direct push'
        required: false
        type: boolean
        default: true
      force_sync:
        description: 'Force sync even with conflicts'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  analyze-sync:
    name: 📊 Analyze Sync Requirements
    runs-on: ubuntu-latest
    outputs:
      main_ahead: ${{ steps.analysis.outputs.main_ahead }}
      develop_ahead: ${{ steps.analysis.outputs.develop_ahead }}
      sync_needed: ${{ steps.analysis.outputs.sync_needed }}
      conflicts_detected: ${{ steps.analysis.outputs.conflicts_detected }}
      
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 📊 Analyze branch divergence
      id: analysis
      run: |
        echo "=== Branch Divergence Analysis ==="
        
        # Fetch latest changes
        git fetch origin main:main
        git fetch origin develop:develop
        
        # Calculate divergence
        MAIN_AHEAD=$(git rev-list --count develop..main)
        DEVELOP_AHEAD=$(git rev-list --count main..develop)
        
        echo "main_ahead=$MAIN_AHEAD" >> $GITHUB_OUTPUT
        echo "develop_ahead=$DEVELOP_AHEAD" >> $GITHUB_OUTPUT
        
        echo "📊 Branch Status:"
        echo "  - main is $MAIN_AHEAD commits ahead of develop"
        echo "  - develop is $DEVELOP_AHEAD commits ahead of main"
        
        # Determine if sync is needed
        if [ $MAIN_AHEAD -gt 0 ] || [ $DEVELOP_AHEAD -gt 0 ]; then
          echo "sync_needed=true" >> $GITHUB_OUTPUT
          echo "✅ Synchronization needed"
        else
          echo "sync_needed=false" >> $GITHUB_OUTPUT
          echo "✅ Branches are in sync"
        fi
        
        # Check for potential conflicts
        git checkout main
        if git merge --no-commit --no-ff develop 2>/dev/null; then
          echo "conflicts_detected=false" >> $GITHUB_OUTPUT
          echo "✅ No conflicts detected for main←develop"
          git merge --abort 2>/dev/null || true
        else
          echo "conflicts_detected=true" >> $GITHUB_OUTPUT
          echo "⚠️ Conflicts detected for main←develop"
          git merge --abort 2>/dev/null || true
        fi

  sync-main-to-develop:
    name: 🔄 Sync main → develop
    runs-on: ubuntu-latest
    needs: analyze-sync
    if: >
      needs.analyze-sync.outputs.sync_needed == 'true' && 
      needs.analyze-sync.outputs.main_ahead != '0' &&
      (github.event.inputs.sync_direction == 'main_to_develop' || 
       github.event.inputs.sync_direction == 'bidirectional' || 
       github.event_name == 'schedule')
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🔄 Perform main → develop sync
      run: |
        echo "🔄 Syncing main → develop"
        
        git config user.name "branch-sync[bot]"
        git config user.email "branch-sync[bot]@users.noreply.github.com"
        
        git fetch origin main:main
        git fetch origin develop:develop
        
        git checkout develop
        
        if [ "${{ github.event.inputs.create_pr }}" = "true" ]; then
          # Create sync branch for PR
          SYNC_BRANCH="sync/main-to-develop-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$SYNC_BRANCH"
          echo "sync_branch=$SYNC_BRANCH" >> $GITHUB_ENV
        fi
        
        # Attempt merge
        if git merge main --no-edit; then
          echo "✅ Sync completed successfully"
          echo "sync_success=true" >> $GITHUB_ENV
        else
          if [ "${{ github.event.inputs.force_sync }}" = "true" ]; then
            echo "⚠️ Conflicts detected, but force sync enabled"
            # Use automated conflict resolution
            git checkout --theirs .
            git add .
            git commit -m "resolve: Force sync main → develop with conflict resolution

🤖 Automated sync with conflict resolution
Conflicts resolved in favor of main branch
            
Generated by Branch Synchronization Bot"
            echo "sync_success=true" >> $GITHUB_ENV
          else
            echo "❌ Conflicts detected, aborting sync"
            git merge --abort
            echo "sync_success=false" >> $GITHUB_ENV
          fi
        fi

    - name: 🚀 Push sync or create PR
      if: env.sync_success == 'true'
      run: |
        if [ "${{ github.event.inputs.create_pr }}" = "true" ]; then
          git push origin "${{ env.sync_branch }}"
        else
          git push origin develop
        fi

    - name: 📋 Create sync PR
      if: env.sync_success == 'true' && github.event.inputs.create_pr == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const syncBranch = process.env.sync_branch;
          const mainAhead = '${{ needs.analyze-sync.outputs.main_ahead }}';
          
          const pr = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🔄 Sync: main → develop (${mainAhead} commits)`,
            head: syncBranch,
            base: 'develop',
            body: `# 🔄 Automated Branch Synchronization
            
            This PR synchronizes changes from \`main\` to \`develop\`.
            
            ## 📊 Sync Details
            - **Direction:** main → develop
            - **Commits synced:** ${mainAhead}
            - **Conflicts:** ${{ needs.analyze-sync.outputs.conflicts_detected == 'true' ? 'Resolved automatically' : 'None detected' }}
            - **Sync method:** ${{ github.event.inputs.force_sync == 'true' ? 'Force sync (conflicts resolved)' : 'Clean merge' }}
            
            ## 🎯 Changes Included
            $(git log --oneline develop..main | head -10)
            
            ## ✅ Validation
            - [x] Branch sync completed
            - [x] No unresolved conflicts
            - [x] Ready for review and merge
            
            ## 🚀 Next Steps
            1. Review the synced changes
            2. Ensure all tests pass
            3. Merge to complete synchronization
            
            ---
            *Generated by Branch Synchronization Bot*
            *Sync time: ${new Date().toISOString()}*
            `
          });
          
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr.data.number,
            labels: ['automated', 'sync', 'main-to-develop']
          });

  sync-develop-to-main:
    name: 🔄 Sync develop → main
    runs-on: ubuntu-latest
    needs: analyze-sync
    if: >
      needs.analyze-sync.outputs.sync_needed == 'true' && 
      needs.analyze-sync.outputs.develop_ahead != '0' &&
      (github.event.inputs.sync_direction == 'develop_to_main' || 
       github.event.inputs.sync_direction == 'bidirectional')
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: ⚠️ Pre-sync validation
      run: |
        echo "⚠️ Syncing develop → main requires extra validation"
        echo "This operation will update the main branch with develop changes"
        echo "Ensuring all checks pass before proceeding..."
        
        # Validate develop branch
        git checkout develop
        
        # Check if develop is in a good state
        if [ -f "Cargo.toml" ]; then
          echo "🦀 Validating Rust code..."
          if ! cargo check --all-features; then
            echo "❌ Develop branch has Rust compilation issues"
            exit 1
          fi
        fi
        
        echo "✅ Develop branch validation passed"

    - name: 🔄 Perform develop → main sync
      run: |
        echo "🔄 Syncing develop → main"
        
        git config user.name "branch-sync[bot]"
        git config user.email "branch-sync[bot]@users.noreply.github.com"
        
        git fetch origin main:main
        git fetch origin develop:develop
        
        git checkout main
        
        if [ "${{ github.event.inputs.create_pr }}" = "true" ]; then
          # Create sync branch for PR
          SYNC_BRANCH="sync/develop-to-main-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$SYNC_BRANCH"
          echo "sync_branch=$SYNC_BRANCH" >> $GITHUB_ENV
        fi
        
        # Attempt merge
        if git merge develop --no-edit; then
          echo "✅ Sync completed successfully"
          echo "sync_success=true" >> $GITHUB_ENV
        else
          if [ "${{ github.event.inputs.force_sync }}" = "true" ]; then
            echo "⚠️ Conflicts detected, using intelligent resolution"
            # Trigger automated conflict resolver
            git merge --abort
            echo "sync_success=false" >> $GITHUB_ENV
            echo "conflicts_need_resolution=true" >> $GITHUB_ENV
          else
            echo "❌ Conflicts detected, aborting sync"
            git merge --abort
            echo "sync_success=false" >> $GITHUB_ENV
          fi
        fi

    - name: 🤖 Trigger conflict resolution
      if: env.conflicts_need_resolution == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'merge-conflict-resolver.yml',
            ref: 'main',
            inputs: {
              target_branch: 'main',
              source_branch: 'develop',
              resolution_strategy: 'intelligent',
              create_pr: 'true',
              run_tests: 'true'
            }
          });
          
          console.log('🤖 Triggered automated conflict resolution workflow');

    - name: 🚀 Push sync or create PR
      if: env.sync_success == 'true'
      run: |
        if [ "${{ github.event.inputs.create_pr }}" = "true" ]; then
          git push origin "${{ env.sync_branch }}"
        else
          git push origin main
        fi

    - name: 📋 Create sync PR
      if: env.sync_success == 'true' && github.event.inputs.create_pr == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const syncBranch = process.env.sync_branch;
          const developAhead = '${{ needs.analyze-sync.outputs.develop_ahead }}';
          
          const pr = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚀 Sync: develop → main (${developAhead} commits)`,
            head: syncBranch,
            base: 'main',
            body: `# 🚀 Automated Branch Synchronization
            
            This PR synchronizes changes from \`develop\` to \`main\`.
            
            ⚠️ **IMPORTANT:** This updates the main branch with new features and changes.
            
            ## 📊 Sync Details
            - **Direction:** develop → main
            - **Commits synced:** ${developAhead}
            - **Conflicts:** ${{ needs.analyze-sync.outputs.conflicts_detected == 'true' ? 'Resolved automatically' : 'None detected' }}
            - **Validation:** All pre-sync checks passed ✅
            
            ## 🎯 Changes Included
            $(git log --oneline main..develop | head -10)
            
            ## ✅ Pre-Merge Validation
            - [x] Rust compilation check passed
            - [x] Branch sync completed
            - [x] No unresolved conflicts
            - [x] Ready for final review
            
            ## 🚀 Post-Merge Actions
            - [ ] Verify main branch builds successfully
            - [ ] Trigger release workflow if needed
            - [ ] Update documentation if required
            
            ---
            *Generated by Branch Synchronization Bot*
            *Sync time: ${new Date().toISOString()}*
            `
          });
          
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr.data.number,
            labels: ['automated', 'sync', 'develop-to-main', 'priority-high']
          });

  sync-report:
    name: 📊 Generate Sync Report
    runs-on: ubuntu-latest
    needs: [analyze-sync, sync-main-to-develop, sync-develop-to-main]
    if: always()
    
    steps:
    - name: 📊 Generate comprehensive sync report
      run: |
        cat << 'EOF' > sync_report.md
        # 🔄 Branch Synchronization Report
        
        **Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        **Trigger:** ${{ github.event_name }}
        **Direction:** ${{ github.event.inputs.sync_direction || 'Scheduled (main→develop)' }}
        
        ## 📊 Branch Analysis
        - **main ahead:** ${{ needs.analyze-sync.outputs.main_ahead }} commits
        - **develop ahead:** ${{ needs.analyze-sync.outputs.develop_ahead }} commits
        - **Sync needed:** ${{ needs.analyze-sync.outputs.sync_needed }}
        - **Conflicts detected:** ${{ needs.analyze-sync.outputs.conflicts_detected }}
        
        ## 🎯 Sync Results
        - **main → develop:** ${{ needs.sync-main-to-develop.result || 'skipped' }}
        - **develop → main:** ${{ needs.sync-develop-to-main.result || 'skipped' }}
        
        ## 💡 Recommendations
        - Set up weekly sync schedule for better branch health
        - Consider shorter-lived feature branches to reduce conflicts
        - Implement pre-commit hooks for early conflict detection
        
        ## 🔄 Next Sync
        Scheduled for next Monday at 1 AM UTC
        
        EOF

    - name: 📤 Upload sync report
      uses: actions/upload-artifact@v4
      with:
        name: sync-report
        path: sync_report.md

  cleanup:
    name: 🧹 Cleanup Sync Branches
    runs-on: ubuntu-latest
    needs: [sync-main-to-develop, sync-develop-to-main]
    if: always()
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🧹 Clean up old sync branches
      run: |
        echo "🧹 Cleaning up old sync branches..."
        
        # Delete sync branches older than 7 days
        git for-each-ref --format="%(refname:short) %(committerdate:unix)" refs/remotes/origin/sync/ | \
        while read branch date; do
          # Remove 'origin/' prefix
          branch_name=${branch#origin/}
          
          # Calculate age in days
          now=$(date +%s)
          age_days=$(( (now - date) / 86400 ))
          
          if [ $age_days -gt 7 ]; then
            echo "Deleting old sync branch: $branch_name (${age_days} days old)"
            git push origin --delete "$branch_name" || echo "Failed to delete $branch_name"
          fi
        done
        
        echo "✅ Cleanup completed"