name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      run_comprehensive_tests:
        description: 'Run comprehensive test suite'
        required: false
        default: 'false'
        type: boolean
      skip_cache:
        description: 'Skip cache for fresh build'
        required: false
        default: 'false'
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: debug

jobs:
  # Fast fail-fast checks that run in parallel
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      rust-version: ${{ steps.rust-info.outputs.rust-version }}
      cargo-version: ${{ steps.rust-info.outputs.cargo-version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.75.0
        components: rustfmt, clippy
        override: true
        profile: minimal

    - name: Get Rust info
      id: rust-info
      run: |
        echo "rust-version=$(rustc --version)" >> $GITHUB_OUTPUT
        echo "cargo-version=$(cargo --version)" >> $GITHUB_OUTPUT

    - name: Cache dependencies
      if: ${{ github.event.inputs.skip_cache != 'true' }}
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Format check (fail-fast)
      run: cargo fmt --all -- --check

    - name: Clippy check (fail-fast)
      run: cargo clippy --all-features -- -D warnings

    - name: Check compilation (fail-fast)
      run: cargo check --all-features

  # Compilation error resolution workflow
  build-validation:
    name: Build Validation (${{ matrix.os }})
    needs: quick-checks
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [1.75.0]
        features: 
          - ""
          - "--features ml"
          - "--features lsp"
          - "--features realtime"
          - "--features plugins"
          - "--all-features"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust (${{ matrix.rust }})
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt, clippy

    - name: Cache dependencies
      if: ${{ github.event.inputs.skip_cache != 'true' }}
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install pkg-config openssl

    - name: Build with specific features
      run: cargo build ${{ matrix.features }} --verbose
      env:
        RUST_BACKTRACE: full

    - name: Run tests with specific features
      run: cargo test ${{ matrix.features }} --verbose
      env:
        RUST_BACKTRACE: full

    - name: Generate build report
      if: failure()
      run: |
        echo "## Build Failure Report" > build-report.md
        echo "- OS: ${{ matrix.os }}" >> build-report.md
        echo "- Rust: ${{ matrix.rust }}" >> build-report.md
        echo "- Features: ${{ matrix.features }}" >> build-report.md
        echo "- Rust version: ${{ needs.quick-checks.outputs.rust-version }}" >> build-report.md
        echo "- Cargo version: ${{ needs.quick-checks.outputs.cargo-version }}" >> build-report.md

    - name: Upload build artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-failure-${{ matrix.os }}-${{ strategy.job-index }}
        path: |
          build-report.md
          Cargo.lock
          target/debug/build/*/out/*.rs
        retention-days: 7

  # ML models compilation check
  ml-models-check:
    name: ML Models Compilation Check
    needs: quick-checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.75.0
        override: true

    - name: Cache dependencies
      if: ${{ github.event.inputs.skip_cache != 'true' }}
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-ml-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build ML features specifically
      run: |
        echo "Building with ML features enabled..."
        cargo check --features ml --verbose

    - name: Test ML functionality
      run: |
        echo "Testing ML functionality..."
        cargo test --features ml ml:: --verbose || echo "ML tests failed"

    - name: Report ML compilation status
      run: |
        echo "## ML Models Compilation Report" > ml-report.md
        echo "Generated at: $(date)" >> ml-report.md
        echo "" >> ml-report.md
        
        if cargo check --features ml --verbose; then
          echo "✅ ML models compile successfully" >> ml-report.md
        else
          echo "❌ ML models have compilation errors" >> ml-report.md
          echo "" >> ml-report.md
          echo "### Compilation Errors:" >> ml-report.md
          cargo check --features ml --verbose 2>&1 || true >> ml-report.md
        fi

    - name: Upload ML report
      uses: actions/upload-artifact@v4
      with:
        name: ml-compilation-report
        path: ml-report.md
        retention-days: 14

  # Security and dependency checks
  security-audit:
    name: Security Audit
    needs: quick-checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.75.0
        override: true

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Run cargo deny
      uses: EmbarkStudios/cargo-deny-action@v1
      with:
        log-level: warn
        command: check
        arguments: --all-features

    - name: Check for known vulnerabilities
      run: |
        echo "Checking for security vulnerabilities..."
        cargo audit --deny warnings || echo "Security issues found"

  # Documentation build check
  documentation:
    name: Documentation Build
    needs: build-validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.75.0
        override: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: docs-site/package-lock.json

    - name: Cache Rust dependencies
      if: ${{ github.event.inputs.skip_cache != 'true' }}
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-docs-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build Rust CLI for docs
      run: cargo build --release

    - name: Install documentation dependencies
      run: |
        cd docs-site
        npm ci

    - name: Build documentation
      run: |
        chmod +x scripts/build-docs.sh
        ./scripts/build-docs.sh

    - name: Check documentation links
      run: |
        if [ -f "scripts/link-validator.js" ]; then
          node scripts/link-validator.js --external
        else
          echo "Link validator not found, skipping"
        fi

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs-site/build
        retention-days: 7

  # Final validation and reporting
  final-validation:
    name: Final Validation & Reporting
    needs: [quick-checks, build-validation, ml-models-check, security-audit, documentation]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate final report
      run: |
        echo "# CI/CD Pipeline Report" > final-report.md
        echo "Generated at: $(date)" >> final-report.md
        echo "" >> final-report.md
        
        echo "## Job Status Summary" >> final-report.md
        echo "- ✅ Quick Checks: ${{ needs.quick-checks.result }}" >> final-report.md
        echo "- ✅ Build Validation: ${{ needs.build-validation.result }}" >> final-report.md
        echo "- ✅ ML Models Check: ${{ needs.ml-models-check.result }}" >> final-report.md
        echo "- ✅ Security Audit: ${{ needs.security-audit.result }}" >> final-report.md
        echo "- ✅ Documentation: ${{ needs.documentation.result }}" >> final-report.md
        echo "" >> final-report.md
        
        echo "## Environment Information" >> final-report.md
        echo "- Rust Version: ${{ needs.quick-checks.outputs.rust-version }}" >> final-report.md
        echo "- Cargo Version: ${{ needs.quick-checks.outputs.cargo-version }}" >> final-report.md
        echo "- GitHub SHA: ${{ github.sha }}" >> final-report.md
        echo "- Branch: ${{ github.ref_name }}" >> final-report.md

    - name: Upload final report
      uses: actions/upload-artifact@v4
      with:
        name: ci-final-report
        path: final-report.md
        retention-days: 30

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ CI Pipeline failed. Check the artifacts for detailed reports."
        echo "Key areas to investigate:"
        echo "1. Compilation errors in ML models"
        echo "2. Build failures across platforms"
        echo "3. Test failures in integration suites"
        echo "4. Security vulnerabilities"

    - name: Notify on success
      if: success()
      run: |
        echo "✅ CI Pipeline completed successfully!"
        echo "All builds passed, tests passed, and security checks completed."