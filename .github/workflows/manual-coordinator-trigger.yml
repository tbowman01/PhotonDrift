name: 🎯 Manual GitHub Coordinator Trigger

on:
  workflow_dispatch:
    inputs:
      coordinator_mode:
        description: 'Coordinator operation mode'
        required: true
        type: choice
        options:
          - 'full-coordination'     # Complete coordination with all subsystems
          - 'build-fix-only'        # Only fix build issues
          - 'conflict-resolution'   # Only resolve conflicts
          - 'quality-check'         # Only run quality gates
          - 'monitoring'            # Only run monitoring
          - 'emergency-fix'         # Emergency mode - bypass some checks
        default: 'full-coordination'
      
      target_branch:
        description: 'Target branch for coordination'
        required: false
        default: 'develop'
        
      force_execution:
        description: 'Force execution even if no issues detected'
        type: boolean
        required: false
        default: false
        
      skip_validation:
        description: 'Skip pre-flight validation (use with caution)'
        type: boolean
        required: false
        default: false
        
      debug_mode:
        description: 'Enable verbose debug logging'
        type: boolean
        required: false
        default: false
        
      notification_level:
        description: 'Notification verbosity level'
        required: false
        type: choice
        options:
          - 'minimal'    # Only critical notifications
          - 'standard'   # Normal notifications
          - 'verbose'    # All notifications
        default: 'standard'

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write
  checks: write
  statuses: write

jobs:
  manual-coordinator-dispatch:
    name: 🎯 Manual Coordinator Dispatch
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🎯 Display Manual Trigger Info
        run: |
          echo "🎯 GitHub Coordinator Manual Trigger Activated"
          echo "================================================"
          echo ""
          echo "📋 Trigger Parameters:"
          echo "  🎛️ Mode: ${{ github.event.inputs.coordinator_mode }}"
          echo "  🌿 Target Branch: ${{ github.event.inputs.target_branch }}"
          echo "  ⚡ Force Execution: ${{ github.event.inputs.force_execution }}"
          echo "  ⏭️ Skip Validation: ${{ github.event.inputs.skip_validation }}"
          echo "  🐛 Debug Mode: ${{ github.event.inputs.debug_mode }}"
          echo "  📢 Notification Level: ${{ github.event.inputs.notification_level }}"
          echo ""
          echo "🚀 Initiated by: ${{ github.actor }}"
          echo "⏰ Timestamp: $(date -u)"

      - name: 🔍 Pre-Manual-Trigger Analysis
        id: analysis
        run: |
          echo "🔍 Analyzing repository state for manual coordination..."
          
          MODE="${{ github.event.inputs.coordinator_mode }}"
          TARGET_BRANCH="${{ github.event.inputs.target_branch }}"
          SKIP_VALIDATION="${{ github.event.inputs.skip_validation }}"
          
          # Check if target branch exists
          if ! git rev-parse --verify "origin/$TARGET_BRANCH" >/dev/null 2>&1; then
            echo "❌ Target branch '$TARGET_BRANCH' does not exist"
            echo "Available branches:"
            git branch -r
            exit 1
          fi
          
          # Repository health check (unless skipped)
          if [ "$SKIP_VALIDATION" != "true" ]; then
            echo "🏥 Running repository health check..."
            
            # Check for uncommitted changes
            UNCOMMITTED=$(git status --porcelain | wc -l)
            echo "uncommitted_changes=$UNCOMMITTED" >> $GITHUB_OUTPUT
            
            # Check for merge conflicts
            CONFLICTS=$(git ls-files -u | wc -l || echo "0")
            echo "conflicts_count=$CONFLICTS" >> $GITHUB_OUTPUT
            
            # Check recent workflow failures
            RECENT_FAILURES=$(gh run list --limit 10 --json conclusion --jq '[.[] | select(.conclusion == "failure")] | length')
            echo "recent_failures=$RECENT_FAILURES" >> $GITHUB_OUTPUT
            
            echo "📊 Repository Health:"
            echo "  📝 Uncommitted changes: $UNCOMMITTED"
            echo "  ⚔️ Conflicts: $CONFLICTS"
            echo "  ❌ Recent failures: $RECENT_FAILURES"
          else
            echo "⏭️ Skipping validation as requested"
          fi
          
          # Set coordination strategy
          echo "coordination_needed=true" >> $GITHUB_OUTPUT
          echo "strategy=$MODE" >> $GITHUB_OUTPUT
          
          echo "✅ Pre-trigger analysis complete"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 Trigger Coordinator Workflow
        id: trigger
        run: |
          echo "🚀 Triggering GitHub Coordinator workflow..."
          
          MODE="${{ github.event.inputs.coordinator_mode }}"
          TARGET_BRANCH="${{ github.event.inputs.target_branch }}"
          FORCE_EXECUTION="${{ github.event.inputs.force_execution }}"
          DEBUG_MODE="${{ github.event.inputs.debug_mode }}"
          
          # Prepare coordinator parameters
          case "$MODE" in
            "full-coordination")
              echo "🔄 Triggering full coordination workflow"
              gh workflow run gh-coordinator.yml \
                -f target_branch="$TARGET_BRANCH" \
                -f force_rebuild="$FORCE_EXECUTION" \
                -f auto_fix_conflicts=true
              ;;
            "build-fix-only")
              echo "🏗️ Triggering build fix only"
              gh workflow run gh-coordinator.yml \
                -f target_branch="$TARGET_BRANCH" \
                -f force_rebuild=true \
                -f auto_fix_conflicts=false
              ;;
            "conflict-resolution")
              echo "🔧 Triggering conflict resolution"
              gh workflow run conflict-resolver.yml \
                -f source_branch=main \
                -f target_branch="$TARGET_BRANCH" \
                -f strategy=smart
              ;;
            "quality-check")
              echo "🛡️ Triggering quality gates"
              gh workflow run quality-gates.yml \
                -f enforce_strict=true
              ;;
            "monitoring")
              echo "📊 Triggering build monitor"
              gh workflow run build-monitor.yml \
                -f monitor_duration=30 \
                -f alert_threshold=20
              ;;
            "emergency-fix")
              echo "🚨 Triggering emergency coordination"
              gh workflow run gh-coordinator.yml \
                -f target_branch="$TARGET_BRANCH" \
                -f force_rebuild=true \
                -f auto_fix_conflicts=true
              ;;
            *)
              echo "❌ Unknown coordinator mode: $MODE"
              exit 1
              ;;
          esac
          
          echo "workflow_triggered=true" >> $GITHUB_OUTPUT
          echo "triggered_mode=$MODE" >> $GITHUB_OUTPUT
          
          echo "✅ Coordinator workflow triggered successfully"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Create Manual Trigger Report
        if: always()
        run: |
          echo "📊 Creating manual trigger report..."
          
          REPORT_FILE="manual-trigger-report-$(date +%Y%m%d-%H%M%S).md"
          
          cat > $REPORT_FILE << EOF
# 🎯 Manual GitHub Coordinator Trigger Report

**Generated**: $(date -u)
**Triggered By**: ${{ github.actor }}
**Workflow Run**: [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

## 📋 Trigger Parameters

| Parameter | Value |
|-----------|--------|
| **Coordinator Mode** | ${{ github.event.inputs.coordinator_mode }} |
| **Target Branch** | ${{ github.event.inputs.target_branch }} |
| **Force Execution** | ${{ github.event.inputs.force_execution }} |
| **Skip Validation** | ${{ github.event.inputs.skip_validation }} |
| **Debug Mode** | ${{ github.event.inputs.debug_mode }} |
| **Notification Level** | ${{ github.event.inputs.notification_level }} |

## 🔍 Pre-Trigger Analysis

$([ "${{ github.event.inputs.skip_validation }}" != "true" ] && echo "| Metric | Value |
|--------|--------|
| **Uncommitted Changes** | ${{ steps.analysis.outputs.uncommitted_changes }} |
| **Conflicts** | ${{ steps.analysis.outputs.conflicts_count }} |
| **Recent Failures** | ${{ steps.analysis.outputs.recent_failures }} |" || echo "⏭️ **Validation skipped** as requested")

## 🚀 Execution Status

| Component | Status |
|-----------|--------|
| **Pre-Analysis** | ${{ steps.analysis.outcome || 'Unknown' }} |
| **Workflow Trigger** | ${{ steps.trigger.outcome || 'Unknown' }} |
| **Mode Executed** | ${{ steps.trigger.outputs.triggered_mode || 'None' }} |

## 🎯 Coordinator Mode Details

**${{ github.event.inputs.coordinator_mode }}**:
$(case "${{ github.event.inputs.coordinator_mode }}" in
  "full-coordination") echo "- Complete repository coordination with all subsystems active
- Build issue resolution, conflict handling, quality gates
- Comprehensive monitoring and reporting" ;;
  "build-fix-only") echo "- Focus on build issues and compilation problems
- Skip conflict resolution and extensive quality checks
- Faster execution for build-specific problems" ;;
  "conflict-resolution") echo "- Smart merge conflict resolution
- File-type aware strategies
- Manual fallback for complex conflicts" ;;
  "quality-check") echo "- Comprehensive code quality validation
- Multi-platform testing matrix
- Security audits and dependency checks" ;;
  "monitoring") echo "- Build health monitoring and analysis
- Failure pattern detection
- Performance metrics collection" ;;
  "emergency-fix") echo "- Emergency coordination mode
- Bypasses some validation steps
- Immediate action on critical issues" ;;
esac)

## 📚 Next Steps

1. **Monitor Progress**: Check the [Actions tab](https://github.com/${{ github.repository }}/actions)
2. **Review Results**: Wait for coordinator workflow completion
3. **Check Reports**: Review generated reports and status updates
4. **Manual Intervention**: Act on any escalated issues if needed

## 🔗 Related Workflows

- **Main Coordinator**: [gh-coordinator.yml](https://github.com/${{ github.repository }}/actions/workflows/gh-coordinator.yml)
- **Conflict Resolver**: [conflict-resolver.yml](https://github.com/${{ github.repository }}/actions/workflows/conflict-resolver.yml)  
- **Quality Gates**: [quality-gates.yml](https://github.com/${{ github.repository }}/actions/workflows/quality-gates.yml)
- **Build Monitor**: [build-monitor.yml](https://github.com/${{ github.repository }}/actions/workflows/build-monitor.yml)

---
*Manual trigger executed by GitHub Coordinator v2.0*
EOF

          echo "📄 Report generated: $REPORT_FILE"

      - name: 📤 Upload Trigger Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: manual-trigger-report
          path: manual-trigger-report-*.md

      - name: 📢 Notification
        if: github.event.inputs.notification_level != 'minimal'
        run: |
          echo "📢 Sending trigger notification..."
          
          NOTIFICATION_LEVEL="${{ github.event.inputs.notification_level }}"
          MODE="${{ github.event.inputs.coordinator_mode }}"
          
          if [ "$NOTIFICATION_LEVEL" = "verbose" ]; then
            NOTIFICATION="## 🎯 Manual GitHub Coordinator Triggered

**Mode**: $MODE  
**Target Branch**: ${{ github.event.inputs.target_branch }}  
**Triggered By**: ${{ github.actor }}  
**Workflow**: [View Progress](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

The GitHub Coordinator has been manually triggered and is now executing the requested coordination tasks.

**Expected Actions**:
$(case "$MODE" in
  "full-coordination") echo "- Complete repository analysis and coordination
- Build issue resolution and conflict handling  
- Quality gates and monitoring activation" ;;
  "build-fix-only") echo "- Focus on build issue detection and resolution
- Skip non-critical quality checks
- Faster turnaround for build problems" ;;
  "conflict-resolution") echo "- Smart conflict resolution using file-type strategies
- Automatic merge handling where possible
- Manual intervention for complex conflicts" ;;
  "quality-check") echo "- Comprehensive code quality validation
- Multi-platform build testing
- Security and dependency audits" ;;
  "monitoring") echo "- Build health analysis and metrics
- Failure pattern detection
- Performance monitoring activation" ;;
  "emergency-fix") echo "- Emergency coordination with expedited processing
- Critical issue resolution priority
- Streamlined validation and reporting" ;;
esac)

Monitor progress in the Actions tab and watch for status updates!"
          else
            NOTIFICATION="🎯 **GitHub Coordinator manually triggered** in $MODE mode by ${{ github.actor }}. [View Progress](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          fi
          
          echo "Notification prepared (length: ${#NOTIFICATION})"
          
          # For now, just log the notification
          # In a real environment, this could post to Slack, Teams, etc.
          echo "📢 NOTIFICATION:"
          echo "$NOTIFICATION"