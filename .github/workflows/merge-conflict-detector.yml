name: üîÄ Merge Conflict Detection & Resolution

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Target branch to check for conflicts'
        required: false
        default: 'main'
      source_branch:
        description: 'Source branch to check conflicts against'
        required: false
        default: 'develop'

jobs:
  detect-conflicts:
    name: üîç Detect Merge Conflicts
    runs-on: ubuntu-latest
    outputs:
      has_conflicts: ${{ steps.conflict-check.outputs.has_conflicts }}
      conflict_files: ${{ steps.conflict-check.outputs.conflict_files }}
      
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: üîç Check for merge conflicts
      id: conflict-check
      run: |
        # Determine branches
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TARGET_BRANCH="${{ github.event.inputs.target_branch }}"
          SOURCE_BRANCH="${{ github.event.inputs.source_branch }}"
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
          SOURCE_BRANCH="${{ github.event.pull_request.head.ref }}"
        else
          TARGET_BRANCH="main"
          SOURCE_BRANCH="develop"
        fi
        
        echo "Checking conflicts between $SOURCE_BRANCH and $TARGET_BRANCH"
        
        # Fetch latest changes
        git fetch origin $TARGET_BRANCH:$TARGET_BRANCH
        git fetch origin $SOURCE_BRANCH:$SOURCE_BRANCH
        
        # Attempt merge to detect conflicts
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git checkout $TARGET_BRANCH
        if git merge --no-commit --no-ff $SOURCE_BRANCH 2>&1 | tee merge_output.log; then
          echo "has_conflicts=false" >> $GITHUB_OUTPUT
          echo "conflict_files=" >> $GITHUB_OUTPUT
          git merge --abort 2>/dev/null || true
        else
          # Parse conflicts
          CONFLICT_FILES=$(git status --porcelain | grep '^UU\|^AA\|^DD' | cut -c4- | tr '\n' ',' | sed 's/,$//')
          echo "has_conflicts=true" >> $GITHUB_OUTPUT
          echo "conflict_files=$CONFLICT_FILES" >> $GITHUB_OUTPUT
          git merge --abort 2>/dev/null || true
        fi

    - name: üìä Generate conflict report
      if: steps.conflict-check.outputs.has_conflicts == 'true'
      run: |
        cat << 'EOF' > conflict_report.md
        # üö® Merge Conflict Report
        
        **Branches:** ${{ github.event.inputs.source_branch || 'develop' }} ‚Üí ${{ github.event.inputs.target_branch || 'main' }}
        **Detection Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        
        ## üìÅ Conflicted Files
        ```
        ${{ steps.conflict-check.outputs.conflict_files }}
        ```
        
        ## üîß Resolution Steps Required
        1. **Checkout target branch:** `git checkout ${{ github.event.inputs.target_branch || 'main' }}`
        2. **Start merge:** `git merge ${{ github.event.inputs.source_branch || 'develop' }}`
        3. **Resolve conflicts** in the files listed above
        4. **Test resolution:** `make validate`
        5. **Complete merge:** `git commit`
        
        ## ü§ñ Automated Resolution Available
        Run the merge conflict resolver:
        ```bash
        gh workflow run merge-conflict-resolver.yml \
          --field target_branch=${{ github.event.inputs.target_branch || 'main' }} \
          --field source_branch=${{ github.event.inputs.source_branch || 'develop' }}
        ```
        
        EOF

    - name: üìù Upload conflict report
      if: steps.conflict-check.outputs.has_conflicts == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: merge-conflict-report
        path: conflict_report.md

  create-issue:
    name: üìã Create Conflict Resolution Issue
    runs-on: ubuntu-latest
    needs: detect-conflicts
    if: needs.detect-conflicts.outputs.has_conflicts == 'true'
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üé´ Create or update merge conflict issue
      uses: actions/github-script@v7
      with:
        script: |
          const conflictFiles = '${{ needs.detect-conflicts.outputs.conflict_files }}';
          const targetBranch = '${{ github.event.inputs.target_branch || 'main' }}';
          const sourceBranch = '${{ github.event.inputs.source_branch || 'develop' }}';
          
          const issueTitle = `üîÄ Merge Conflicts: ${sourceBranch} ‚Üí ${targetBranch}`;
          
          const issueBody = `# üö® Merge Conflict Detection Alert
          
          **Auto-detected merge conflicts** between \`${sourceBranch}\` and \`${targetBranch}\`.
          
          ## üìÅ Conflicted Files
          \`\`\`
          ${conflictFiles.split(',').join('\n')}
          \`\`\`
          
          ## üîß Quick Resolution Options
          
          ### Option 1: Automated Resolution
          \`\`\`bash
          gh workflow run merge-conflict-resolver.yml \\
            --field target_branch=${targetBranch} \\
            --field source_branch=${sourceBranch}
          \`\`\`
          
          ### Option 2: Manual Resolution
          1. **Checkout target:** \`git checkout ${targetBranch}\`
          2. **Merge source:** \`git merge ${sourceBranch}\`
          3. **Resolve conflicts** in the files above
          4. **Validate:** \`make validate\`
          5. **Commit:** \`git commit\`
          
          ## üéØ Common Conflict Types
          - **Cargo.toml:** Usually dependency version conflicts
          - **Dockerfile:** Build argument or instruction conflicts
          - **Makefile:** Target definition conflicts
          - **Source files:** Code logic conflicts
          
          ## üìä Resolution Priority
          - üî¥ **High:** Blocking builds or CI
          - üü° **Medium:** Documentation or configuration
          - üü¢ **Low:** Comments or formatting
          
          ---
          *Auto-generated by Merge Conflict Detector*
          *Detection time: ${new Date().toISOString()}*
          `;
          
          // Search for existing issue
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'merge-conflict'
          });
          
          const existingIssue = existingIssues.data.find(issue => 
            issue.title.includes(`${sourceBranch} ‚Üí ${targetBranch}`)
          );
          
          if (existingIssue) {
            // Update existing issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: issueBody
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: `üîÑ **Conflict Re-detected:** ${new Date().toISOString()}\n\nFiles: \`${conflictFiles}\``
            });
          } else {
            // Create new issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['merge-conflict', 'automated', 'priority-high']
            });
          }

  notify-team:
    name: üì¢ Notify Development Team
    runs-on: ubuntu-latest
    needs: [detect-conflicts, create-issue]
    if: needs.detect-conflicts.outputs.has_conflicts == 'true'
    
    steps:
    - name: üìß Send notification
      run: |
        echo "üö® MERGE CONFLICT DETECTED"
        echo "Branches: ${{ github.event.inputs.source_branch || 'develop' }} ‚Üí ${{ github.event.inputs.target_branch || 'main' }}"
        echo "Files: ${{ needs.detect-conflicts.outputs.conflict_files }}"
        echo "Issue created for resolution tracking"
        
        # Could integrate with Slack, Discord, or email notifications here
        # Example: curl -X POST $SLACK_WEBHOOK_URL -d "{'text': 'Merge conflict detected...'}"

  prevention-analysis:
    name: üõ°Ô∏è Conflict Prevention Analysis
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: üìä Analyze conflict patterns
      run: |
        echo "üõ°Ô∏è Analyzing merge conflict patterns..."
        
        # Analyze git history for conflict-prone files
        git log --merge --name-only --pretty=format: | sort | uniq -c | sort -nr > conflict_prone_files.txt
        
        # Analyze branch divergence
        COMMITS_AHEAD=$(git rev-list --count main..develop)
        COMMITS_BEHIND=$(git rev-list --count develop..main)
        
        echo "Branch divergence analysis:"
        echo "- develop is $COMMITS_AHEAD commits ahead of main"
        echo "- develop is $COMMITS_BEHIND commits behind main"
        
        if [ $COMMITS_AHEAD -gt 10 ] || [ $COMMITS_BEHIND -gt 10 ]; then
          echo "‚ö†Ô∏è HIGH DIVERGENCE: Consider more frequent syncing"
        fi
        
        echo "Conflict-prone files (top 10):"
        head -10 conflict_prone_files.txt || echo "No conflict history found"

    - name: üí° Generate prevention recommendations
      run: |
        cat << 'EOF' > prevention_recommendations.md
        # üõ°Ô∏è Merge Conflict Prevention Recommendations
        
        ## üìä Current Analysis
        - Branch divergence detected
        - Conflict-prone files identified
        
        ## üéØ Prevention Strategies
        1. **Frequent Syncing:** Merge main‚Üídevelop weekly
        2. **Pre-commit Hooks:** Validate before commits
        3. **Feature Branches:** Use shorter-lived feature branches
        4. **Code Reviews:** Early conflict detection in PRs
        5. **Automated Testing:** Catch integration issues early
        
        ## üîÑ Recommended Automation
        - Weekly develop‚Üímain sync PRs
        - Daily conflict detection runs
        - PR-based conflict resolution
        - Automated testing after resolution
        
        EOF

    - name: üìù Upload prevention analysis
      uses: actions/upload-artifact@v4
      with:
        name: conflict-prevention-analysis
        path: |
          conflict_prone_files.txt
          prevention_recommendations.md