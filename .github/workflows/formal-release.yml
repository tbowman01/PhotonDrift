name: Formal Release Creation

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., 0.3.0, 1.0.0)'
        required: true
        type: string
      release_branch:
        description: 'Source branch for release'
        required: true
        default: 'main'
        type: choice
        options:
          - main
          - develop
      release_type:
        description: 'Type of release'
        required: true
        default: 'stable'
        type: choice
        options:
          - stable
          - lts
          - security
      pre_release:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip test suite (emergency releases only)'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  validate-release:
    name: Validate Release Prerequisites
    runs-on: ubuntu-latest
    outputs:
      validation_passed: ${{ steps.validate.outputs.passed }}
      release_version: ${{ steps.validate.outputs.release_version }}
      release_notes_path: ${{ steps.validate.outputs.release_notes_path }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.release_branch }}
          fetch-depth: 0
      
      - name: Validate release version
        id: validate
        run: |
          RELEASE_VERSION="${{ github.event.inputs.release_version }}"
          RELEASE_BRANCH="${{ github.event.inputs.release_branch }}"
          
          echo "🔍 Validating release: $RELEASE_VERSION from $RELEASE_BRANCH"
          
          # Validate version format (semantic versioning)
          if ! echo "$RELEASE_VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$'; then
            echo "❌ Invalid version format: $RELEASE_VERSION"
            echo "✅ Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi
          
          # Check if tag already exists
          if git tag | grep -q "^v$RELEASE_VERSION$"; then
            echo "❌ Tag v$RELEASE_VERSION already exists"
            exit 1
          fi
          
          # Validate branch exists and is accessible
          if ! git rev-parse --verify "origin/$RELEASE_BRANCH" >/dev/null 2>&1; then
            echo "❌ Branch $RELEASE_BRANCH does not exist or is not accessible"
            exit 1
          fi
          
          # Check for required files
          required_files=("Cargo.toml" "src/main.rs" "src/lib.rs")
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "❌ Required file missing: $file"
              exit 1
            fi
          done
          
          # Look for release notes
          release_notes_candidates=(
            "RELEASE_NOTES_$RELEASE_VERSION.md"
            "docs/releases/v$RELEASE_VERSION.md"
            "CHANGELOG.md"
            "RELEASES.md"
          )
          
          release_notes_path=""
          for candidate in "${release_notes_candidates[@]}"; do
            if [[ -f "$candidate" ]]; then
              release_notes_path="$candidate"
              break
            fi
          done
          
          if [[ -z "$release_notes_path" ]]; then
            echo "⚠️ No release notes found. Will generate automatically."
            release_notes_path="generated"
          else
            echo "✅ Found release notes: $release_notes_path"
          fi
          
          echo "✅ All validations passed"
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "release_notes_path=$release_notes_path" >> $GITHUB_OUTPUT

  prepare-release:
    name: Prepare Release Branch
    runs-on: ubuntu-latest
    needs: validate-release
    if: needs.validate-release.outputs.validation_passed == 'true'
    outputs:
      release_branch: ${{ steps.create-branch.outputs.branch }}
      release_commit: ${{ steps.create-branch.outputs.commit }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.release_branch }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git
        run: |
          git config --global user.name "PhotonDrift Release Bot"
          git config --global user.email "releases@photondrift.io"
      
      - name: Create release branch
        id: create-branch
        run: |
          RELEASE_VERSION="${{ needs.validate-release.outputs.release_version }}"
          SOURCE_BRANCH="${{ github.event.inputs.release_branch }}"
          RELEASE_BRANCH="release/v$RELEASE_VERSION"
          
          echo "🚀 Creating release branch: $RELEASE_BRANCH"
          
          # Create and switch to release branch
          git checkout -b "$RELEASE_BRANCH"
          
          # Update version in Cargo.toml
          sed -i.tmp "s/^version = \".*\"/version = \"$RELEASE_VERSION\"/" Cargo.toml
          rm -f Cargo.toml.tmp
          
          # Verify version update
          UPDATED_VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
          if [[ "$UPDATED_VERSION" != "$RELEASE_VERSION" ]]; then
            echo "❌ Failed to update version in Cargo.toml"
            exit 1
          fi
          
          echo "✅ Updated Cargo.toml version to: $UPDATED_VERSION"
          
          # Create version info file
          cat > VERSION_INFO.md << EOF
          # PhotonDrift Release $RELEASE_VERSION
          
          **Release Type**: ${{ github.event.inputs.release_type }}  
          **Source Branch**: $SOURCE_BRANCH  
          **Release Branch**: $RELEASE_BRANCH  
          **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')  
          **Commit**: \`$(git rev-parse HEAD)\`  
          
          ## Build Information
          - **Rust Version**: $(rustc --version 2>/dev/null || echo "Not available")
          - **Platform**: $(uname -a)
          - **CI Runner**: GitHub Actions
          
          ## Release Checklist
          - [x] Version updated in Cargo.toml
          - [x] Release branch created
          - [ ] Tests passing
          - [ ] Binaries built
          - [ ] WASM module generated
          - [ ] Documentation updated
          - [ ] GitHub release created
          EOF
          
          # Commit changes
          git add Cargo.toml VERSION_INFO.md
          git commit -m "chore: prepare release v$RELEASE_VERSION

          Release preparation:
          - Update version to $RELEASE_VERSION
          - Create release branch $RELEASE_BRANCH
          - Add release metadata
          
          Type: ${{ github.event.inputs.release_type }}
          Source: $SOURCE_BRANCH"
          
          # Push release branch
          git push origin "$RELEASE_BRANCH"
          
          RELEASE_COMMIT=$(git rev-parse HEAD)
          
          echo "branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT
          echo "commit=$RELEASE_COMMIT" >> $GITHUB_OUTPUT
          echo "✅ Release branch created and pushed: $RELEASE_BRANCH"

  comprehensive-testing:
    name: Comprehensive Testing Suite
    runs-on: ${{ matrix.os }}
    needs: prepare-release
    if: github.event.inputs.skip_tests != 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
    
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.release_branch }}
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Setup cross-compilation (ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo 'CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc' >> $GITHUB_ENV
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}-release-test
      
      - name: Run comprehensive tests
        run: |
          echo "🧪 Running test suite for ${{ matrix.target }}"
          
          # Run tests with all features
          cargo test --target ${{ matrix.target }} --all-features --verbose
          
          # Run integration tests
          cargo test --target ${{ matrix.target }} --tests --verbose
          
          # Run documentation tests
          cargo test --target ${{ matrix.target }} --doc --verbose
      
      - name: Build release binary
        run: |
          echo "🔨 Building release binary for ${{ matrix.target }}"
          cargo build --release --target ${{ matrix.target }} --all-features --verbose
      
      - name: Verify binary
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BINARY="target/${{ matrix.target }}/release/adrscan.exe"
          else
            BINARY="target/${{ matrix.target }}/release/adrscan"
          fi
          
          if [[ ! -f "$BINARY" ]]; then
            echo "❌ Binary not found: $BINARY"
            exit 1
          fi
          
          # Get binary size
          BINARY_SIZE=$(stat -f%z "$BINARY" 2>/dev/null || stat -c%s "$BINARY")
          echo "✅ Binary built successfully: $BINARY ($BINARY_SIZE bytes)"
          
          # Test binary execution (if not cross-compiling)
          if [[ "${{ matrix.target }}" == *"$(uname -m)"* ]] || [[ "${{ matrix.os }}" == "windows-latest" && "${{ matrix.target }}" == "x86_64-pc-windows-msvc" ]]; then
            echo "🔍 Testing binary execution..."
            $BINARY --version || echo "⚠️ Binary execution test failed (may be expected for cross-compiled binaries)"
          fi

  wasm-release-build:
    name: Build WASM Release Module
    runs-on: ubuntu-latest
    needs: prepare-release
    
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.release_branch }}
      
      - name: Setup Rust with WASM target
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      
      - name: Install WASM tools
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
          cargo install wasm-bindgen-cli
      
      - name: Build optimized WASM module
        run: |
          echo "🌐 Building WASM module for release"
          
          # Build with maximum optimizations
          RUSTFLAGS="-C opt-level=z -C lto=fat" \
          cargo build --target wasm32-unknown-unknown --features wasm --release --lib
          
          # Generate bindings
          wasm-bindgen target/wasm32-unknown-unknown/release/adrscan.wasm \
            --out-dir wasm-release \
            --web --typescript \
            --remove-name-section \
            --remove-producers-section
          
          # Verify WASM module
          WASM_FILE="target/wasm32-unknown-unknown/release/adrscan.wasm"
          WASM_SIZE=$(stat -c%s "$WASM_FILE")
          
          echo "✅ WASM module built: $WASM_SIZE bytes"
          
          # Size validation
          if [[ $WASM_SIZE -lt 10000 ]]; then
            echo "❌ WASM module suspiciously small ($WASM_SIZE bytes)"
            exit 1
          elif [[ $WASM_SIZE -gt 5000000 ]]; then
            echo "⚠️ WASM module quite large ($WASM_SIZE bytes)"
          fi
          
          # Copy to predictable location
          cp "$WASM_FILE" "photondrift-${{ needs.validate-release.outputs.release_version }}.wasm"
      
      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-release-module
          path: |
            photondrift-*.wasm
            wasm-release/
          retention-days: 90

  build-release-assets:
    name: Build Release Assets
    runs-on: ${{ matrix.os }}
    needs: [prepare-release, comprehensive-testing]
    if: always() && (needs.comprehensive-testing.result == 'success' || github.event.inputs.skip_tests == 'true')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: photondrift-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_name: photondrift-linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: photondrift-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: photondrift-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: photondrift-macos-arm64
    
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.release_branch }}
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Setup cross-compilation
        if: contains(matrix.target, 'aarch64') && matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo 'CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc' >> $GITHUB_ENV
      
      - name: Build production binary
        run: |
          echo "🏗️ Building production binary: ${{ matrix.asset_name }}"
          
          # Build with full optimizations
          RUSTFLAGS="-C target-cpu=native -C opt-level=3 -C lto=fat" \
          cargo build --release --target ${{ matrix.target }} --all-features
          
          # Copy to asset name
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp "target/${{ matrix.target }}/release/adrscan.exe" "${{ matrix.asset_name }}"
          else
            cp "target/${{ matrix.target }}/release/adrscan" "${{ matrix.asset_name }}"
          fi
          
          # Strip binary (Unix only)
          if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
            strip "${{ matrix.asset_name }}" 2>/dev/null || true
          fi
          
          # Get final size
          FINAL_SIZE=$(stat -f%z "${{ matrix.asset_name }}" 2>/dev/null || stat -c%s "${{ matrix.asset_name }}")
          echo "✅ Production binary ready: ${{ matrix.asset_name }} ($FINAL_SIZE bytes)"
      
      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}
          retention-days: 90

  create-formal-release:
    name: Create Formal GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, prepare-release, build-release-assets, wasm-release-build]
    if: always() && needs.prepare-release.result == 'success'
    
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.release_branch }}
          fetch-depth: 0
      
      - name: Download all release assets
        uses: actions/download-artifact@v4
        with:
          path: ./release-artifacts
      
      - name: Prepare release package
        run: |
          mkdir -p final-release
          RELEASE_VERSION="${{ needs.validate-release.outputs.release_version }}"
          
          echo "📦 Preparing release package for v$RELEASE_VERSION"
          
          # Copy all binary assets
          find ./release-artifacts -name "photondrift-*" -type f -exec cp {} final-release/ \;
          
          # Copy WASM module
          find ./release-artifacts -name "*.wasm" -type f -exec cp {} final-release/ \;
          
          # Copy additional files
          cp VERSION_INFO.md final-release/
          cp README.md final-release/ 2>/dev/null || echo "README.md not found"
          cp LICENSE final-release/ 2>/dev/null || echo "LICENSE not found"
          
          # Create checksums
          cd final-release
          if command -v sha256sum >/dev/null; then
            sha256sum * > SHA256SUMS
          elif command -v shasum >/dev/null; then
            shasum -a 256 * > SHA256SUMS
          fi
          cd ..
          
          echo "📋 Release package contents:"
          ls -la final-release/
      
      - name: Generate comprehensive release notes
        id: release_notes
        run: |
          RELEASE_VERSION="${{ needs.validate-release.outputs.release_version }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          SOURCE_BRANCH="${{ github.event.inputs.release_branch }}"
          
          cat > comprehensive-release-notes.md << EOF
          # 🚀 PhotonDrift $RELEASE_VERSION ($RELEASE_TYPE Release)
          
          **Release Date**: $(date -u '+%Y-%m-%d')  
          **Source Branch**: \`$SOURCE_BRANCH\`  
          **Release Type**: $RELEASE_TYPE  
          **Commit**: \`${{ needs.prepare-release.outputs.release_commit }}\`
          
          ## 📥 Downloads
          
          ### Native Binaries
          | Platform | Architecture | Download |
          |----------|-------------|----------|
          | Linux | x86_64 | \`photondrift-linux-amd64\` |
          | Linux | ARM64 | \`photondrift-linux-arm64\` |
          | Windows | x86_64 | \`photondrift-windows-amd64.exe\` |
          | macOS | x86_64 | \`photondrift-macos-amd64\` |
          | macOS | ARM64 (M1/M2) | \`photondrift-macos-arm64\` |
          
          ### WebAssembly
          - **WASM Module**: \`photondrift-$RELEASE_VERSION.wasm\`
          - **TypeScript Bindings**: Included in release
          
          ### Verification
          - **Checksums**: \`SHA256SUMS\`
          - **Version Info**: \`VERSION_INFO.md\`
          
          ## 🔧 Installation
          
          ### Quick Install (Linux/macOS)
          \`\`\`bash
          # Download latest release
          curl -L "https://github.com/tbowman01/PhotonDrift/releases/download/v$RELEASE_VERSION/photondrift-linux-amd64" -o photondrift
          chmod +x photondrift
          
          # Verify installation
          ./photondrift --version
          \`\`\`
          
          ### Package Managers
          \`\`\`bash
          # Via npm (coming soon)
          npm install -g photondrift-cli@$RELEASE_VERSION
          
          # Via cargo
          cargo install --git https://github.com/tbowman01/PhotonDrift --tag v$RELEASE_VERSION
          \`\`\`
          
          ## ✨ What's New
          
          ### 🏗️ Architecture Decision Records (ADR)
          - Complete ADR lifecycle management
          - Template-based ADR creation
          - Status tracking and transitions
          - Markdown-based format with YAML frontmatter
          
          ### 🔍 ML-Enhanced Drift Detection
          - **5 Detection Algorithms**: Isolation Forest, Local Outlier Factor, One-Class SVM, Statistical Analysis, Pattern Recognition
          - **Real-time Monitoring**: Continuous codebase analysis
          - **Intelligent Alerts**: Context-aware notifications
          - **Performance Optimization**: Parallel processing with rayon
          
          ### 🌐 WebAssembly Integration
          - Browser-compatible WASM module
          - TypeScript bindings included
          - Optimized for web applications
          - Size-optimized build ($([[ -f final-release/photondrift-$RELEASE_VERSION.wasm ]] && stat -c%s final-release/photondrift-$RELEASE_VERSION.wasm || echo "TBD") bytes)
          
          ### 🔧 Plugin System
          - Extensible architecture
          - IDE integration support (VS Code, IntelliJ, Universal LSP)
          - Custom drift analysis rules
          - Marketplace integration (planned)
          
          ### 📊 Advanced Features
          - **Configuration Management**: Flexible YAML/TOML configuration
          - **Template System**: Customizable ADR templates
          - **CLI Interface**: Comprehensive command-line tools
          - **JSON/YAML Export**: Multiple output formats
          - **Git Integration**: Seamless version control workflow
          
          ## 🔒 Security & Quality
          
          - **Dependency Audit**: All dependencies security-scanned
          - **Memory Safety**: 100% Rust implementation
          - **Static Analysis**: Comprehensive linting and formatting
          - **Test Coverage**: Extensive test suite (171+ tests)
          
          ## 📋 System Requirements
          
          ### Minimum Requirements
          - **OS**: Linux (glibc 2.17+), Windows 10+, macOS 10.12+
          - **Memory**: 64MB RAM
          - **Storage**: 50MB disk space
          - **Network**: Optional (for updates and marketplace)
          
          ### Recommended
          - **OS**: Latest LTS versions
          - **Memory**: 256MB RAM
          - **CPU**: Multi-core for parallel processing
          
          ## 🚀 Getting Started
          
          \`\`\`bash
          # Initialize new ADR repository
          photondrift init
          
          # Create your first ADR
          photondrift new "Use microservices architecture"
          
          # Analyze codebase for drift
          photondrift scan --ml-analysis
          
          # Start real-time monitoring
          photondrift monitor --continuous
          \`\`\`
          
          ## 📚 Documentation
          
          - **User Guide**: [docs.photondrift.io/guide](https://docs.photondrift.io/guide)
          - **API Reference**: [docs.photondrift.io/api](https://docs.photondrift.io/api)
          - **Plugin Development**: [docs.photondrift.io/plugins](https://docs.photondrift.io/plugins)
          - **Examples**: [github.com/tbowman01/PhotonDrift/tree/main/examples](https://github.com/tbowman01/PhotonDrift/tree/main/examples)
          
          ## 🤝 Support
          
          - **Issues**: [GitHub Issues](https://github.com/tbowman01/PhotonDrift/issues)
          - **Discussions**: [GitHub Discussions](https://github.com/tbowman01/PhotonDrift/discussions)
          - **Community**: [Discord Server](https://discord.gg/photondrift) (coming soon)
          
          ## 📈 Changelog
          
          This release includes all changes from the previous alpha/RC builds plus:
          - Production-ready stability improvements
          - Performance optimizations
          - Security enhancements
          - Documentation updates
          
          **Full Changelog**: [Compare changes](https://github.com/tbowman01/PhotonDrift/compare/v0.2.0-alpha.20250721...v$RELEASE_VERSION)
          
          ---
          
          ## 🎉 Thank You
          
          Special thanks to all contributors, testers, and community members who made this release possible!
          
          **PhotonDrift Team**  
          *Building the future of architecture decision management* 🌟
          EOF
          
          echo "Generated comprehensive release notes:"
          wc -l comprehensive-release-notes.md
      
      - name: Create formal GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate-release.outputs.release_version }}
          name: PhotonDrift ${{ needs.validate-release.outputs.release_version }}
          body_path: comprehensive-release-notes.md
          files: final-release/*
          prerelease: ${{ github.event.inputs.pre_release }}
          draft: false
          make_latest: true
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create release summary
        run: |
          RELEASE_VERSION="${{ needs.validate-release.outputs.release_version }}"
          echo "🎉 PhotonDrift v$RELEASE_VERSION released successfully!"
          echo "📦 Release URL: https://github.com/tbowman01/PhotonDrift/releases/tag/v$RELEASE_VERSION"
          echo "🌟 Type: ${{ github.event.inputs.release_type }}"
          echo "📋 Assets: $(ls final-release/ | wc -l) files"
          echo "🔒 Pre-release: ${{ github.event.inputs.pre_release }}"

  post-release-tasks:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [prepare-release, create-formal-release]
    if: needs.create-formal-release.result == 'success'
    
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git
        run: |
          git config --global user.name "PhotonDrift Release Bot"
          git config --global user.email "releases@photondrift.io"
      
      - name: Merge release to main
        run: |
          RELEASE_BRANCH="${{ needs.prepare-release.outputs.release_branch }}"
          RELEASE_VERSION="${{ needs.validate-release.outputs.release_version }}"
          
          echo "🔄 Merging $RELEASE_BRANCH to main"
          
          # Fetch release branch
          git fetch origin "$RELEASE_BRANCH"
          
          # Merge release branch
          git merge --no-ff "origin/$RELEASE_BRANCH" -m "chore: merge release v$RELEASE_VERSION to main

          Formal release merge:
          - Version: $RELEASE_VERSION
          - Type: ${{ github.event.inputs.release_type }}
          - Release branch: $RELEASE_BRANCH
          
          This merge brings the formal release to main branch."
          
          # Push to main
          git push origin main
          
          echo "✅ Release merged to main successfully"
      
      - name: Update develop branch
        if: github.event.inputs.release_branch != 'develop'
        run: |
          echo "🔄 Updating develop branch with release changes"
          
          # Switch to develop
          git checkout develop
          git pull origin develop
          
          # Merge main (which now contains the release)
          git merge --no-ff main -m "chore: sync develop with release v${{ needs.validate-release.outputs.release_version }}

          Post-release sync:
          - Brings release changes to develop
          - Maintains version consistency
          - Prepares for next development cycle"
          
          # Push develop
          git push origin develop
          
          echo "✅ Develop branch updated successfully"
      
      - name: Cleanup release branch
        run: |
          RELEASE_BRANCH="${{ needs.prepare-release.outputs.release_branch }}"
          echo "🧹 Cleaning up release branch: $RELEASE_BRANCH"
          
          # Delete remote release branch
          git push origin --delete "$RELEASE_BRANCH"
          
          echo "✅ Release branch cleanup completed"