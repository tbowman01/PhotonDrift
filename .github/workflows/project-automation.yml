name: Project Automation

on:
  issues:
    types: [opened, labeled, assigned]
  pull_request:
    types: [opened, ready_for_review, merged]
  schedule:
    - cron: '0 9 * * 1'  # Weekly Monday morning review

jobs:
  phase-progress-report:
    name: Generate Phase Progress Report
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate Progress Report
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              per_page: 100
            });
            
            const phases = {
              'phase-1': { open: 0, closed: 0, total: 0 },
              'phase-2': { open: 0, closed: 0, total: 0 },
              'phase-3': { open: 0, closed: 0, total: 0 },
              'phase-4': { open: 0, closed: 0, total: 0 }
            };
            
            issues.forEach(issue => {
              const phaseLabels = issue.labels.filter(label => 
                label.name.startsWith('phase-')
              );
              
              phaseLabels.forEach(label => {
                if (phases[label.name]) {
                  phases[label.name].total++;
                  if (issue.state === 'closed') {
                    phases[label.name].closed++;
                  } else {
                    phases[label.name].open++;
                  }
                }
              });
            });
            
            let report = `# 📊 Weekly Progress Report
            
            **Generated:** ${new Date().toISOString().split('T')[0]}
            
            ## Phase Progress
            
            `;
            
            Object.entries(phases).forEach(([phase, stats]) => {
              const progress = stats.total > 0 ? Math.round((stats.closed / stats.total) * 100) : 0;
              const progressBar = '█'.repeat(Math.floor(progress / 10)) + '░'.repeat(10 - Math.floor(progress / 10));
              
              report += `### ${phase.toUpperCase().replace('-', ' ')}
            - **Progress:** ${progress}% (${stats.closed}/${stats.total})
            - **Status:** ${progressBar}
            - **Open Issues:** ${stats.open}
            - **Completed:** ${stats.closed}
            
            `;
            });
            
            // Create or update progress issue
            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'progress-report'
            });
            
            if (existingIssues.length > 0) {
              // Update existing progress report
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssues[0].number,
                body: report
              });
            } else {
              // Create new progress report
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `📊 Weekly Progress Report - ${new Date().toISOString().split('T')[0]}`,
                body: report,
                labels: ['progress-report', 'documentation']
              });
            }

  pr-ready-notification:
    name: PR Ready Notification
    runs-on: ubuntu-latest
    if: github.event.action == 'ready_for_review'
    steps:
      - name: Notify team of PR ready for review
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const prTitle = context.payload.pull_request.title;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `🔍 **Ready for Review**
              
              This PR is now ready for review. Please review:
              - [ ] Code quality and standards
              - [ ] Test coverage
              - [ ] Documentation updates
              - [ ] Issue requirements fulfilled
              
              **Reviewers:** Please assign yourself if available for review.`
            });

  milestone-automation:
    name: Milestone Automation
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    steps:
      - name: Auto-assign to milestones
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            if (!issue) return;
            
            const phaseLabels = issue.labels.filter(label => 
              label.name.startsWith('phase-')
            );
            
            if (phaseLabels.length > 0) {
              const phase = phaseLabels[0].name;
              let milestoneName = '';
              
              switch(phase) {
                case 'phase-1':
                  milestoneName = 'Phase 1 - CLI MVP';
                  break;
                case 'phase-2':
                  milestoneName = 'Phase 2 - Drift Detection';
                  break;
                case 'phase-3':
                  milestoneName = 'Phase 3 - WASM & GitHub Action';
                  break;
                case 'phase-4':
                  milestoneName = 'Phase 4 - Documentation';
                  break;
              }
              
              if (milestoneName) {
                // Find or create milestone
                const { data: milestones } = await github.rest.issues.listMilestones({
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });
                
                let milestone = milestones.find(m => m.title === milestoneName);
                
                if (!milestone) {
                  const { data: newMilestone } = await github.rest.issues.createMilestone({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: milestoneName,
                    description: `Tracking progress for ${milestoneName}`
                  });
                  milestone = newMilestone;
                }
                
                // Assign issue to milestone
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  milestone: milestone.number
                });
              }
            }