name: Container Build and Publish

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Target platforms'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: string
      push_to_registry:
        description: 'Push to container registry'
        required: false
        default: 'true'
        type: boolean
      canary:
        description: 'Mark as canary release'
        required: false
        default: 'false'
        type: boolean
      build_type:
        description: 'Build type override'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - dev
          - staging
          - prod
          - canary
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'Dockerfile'
      - '.dockerignore'
      - '.github/workflows/container-build.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Dockerfile'
      - '.dockerignore'
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Enhanced platform configuration
  PLATFORMS: ${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}
  # Enhanced push decision logic
  SHOULD_PUSH: ${{ github.event_name == 'release' || github.event_name == 'push' || github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.push_to_registry == 'true') }}

jobs:
  # Simplified single job with conditional steps
  build:
    name: Build Container
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
      attestations: write
      id-token: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup build environment
        id: setup
        run: |
          # Enhanced environment setup with comprehensive versioning
          echo "IMAGE_NAME_LOWER=${IMAGE_NAME,,}" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
          echo "GIT_SHA_FULL=${GITHUB_SHA}" >> $GITHUB_ENV
          echo "GIT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV
          echo "GIT_REF=${GITHUB_REF}" >> $GITHUB_ENV
          
          # Branch name sanitization for tags
          BRANCH_NAME="${GITHUB_REF_NAME//\//-}"
          echo "BRANCH_NAME_CLEAN=${BRANCH_NAME//[^a-zA-Z0-9-]/-}" >> $GITHUB_ENV
          echo "BRANCH=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          
<<<<<<< HEAD
          # Extract version from Cargo.toml
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Extract semantic version
          if [[ "$VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-.*)?$ ]]; then
            SEMVER="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}"
            echo "SEMVER=$SEMVER" >> $GITHUB_ENV
            echo "MAJOR=${BASH_REMATCH[1]}" >> $GITHUB_ENV
            echo "MINOR=${BASH_REMATCH[2]}" >> $GITHUB_ENV
            echo "PATCH=${BASH_REMATCH[3]}" >> $GITHUB_ENV
            echo "PRERELEASE=${BASH_REMATCH[4]}" >> $GITHUB_ENV
          else
            echo "SEMVER=$VERSION" >> $GITHUB_ENV
          fi
=======
          # Extract version from Cargo.toml and append run ID for CI builds
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
          if [[ "${{ github.event_name }}" != "pull_request" && "$BRANCH_NAME" == "develop" ]]; then
            VERSION="${VERSION}.${GITHUB_RUN_ID}"
          elif [[ "${{ github.event_name }}" != "pull_request" && "$BRANCH_NAME" == "main" ]]; then
            VERSION="${VERSION}.${GITHUB_RUN_ID}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Extract semantic version
          if [[ "$VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-.*)?$ ]]; then
            SEMVER="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}"
            echo "SEMVER=$SEMVER" >> $GITHUB_ENV
            echo "MAJOR=${BASH_REMATCH[1]}" >> $GITHUB_ENV
            echo "MINOR=${BASH_REMATCH[2]}" >> $GITHUB_ENV
            echo "PATCH=${BASH_REMATCH[3]}" >> $GITHUB_ENV
            echo "PRERELEASE=${BASH_REMATCH[4]}" >> $GITHUB_ENV
          else
            echo "SEMVER=$VERSION" >> $GITHUB_ENV
          fi
          
          # Enhanced build type determination
          BUILD_TYPE="${{ github.event.inputs.build_type }}"
          if [[ "$BUILD_TYPE" == "auto" || -z "$BUILD_TYPE" ]]; then
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              BUILD_TYPE="pr"
              echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            elif [[ "${{ github.event_name }}" == "release" ]]; then
              BUILD_TYPE="release"
            elif [[ "${{ github.event_name }}" == "schedule" ]]; then
              BUILD_TYPE="nightly"
            elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
              BUILD_TYPE="edge"
            elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              BUILD_TYPE="stable"
            elif [[ "${{ github.event.inputs.canary }}" == "true" ]]; then
              BUILD_TYPE="canary"
            else
              BUILD_TYPE="dev"
            fi
          fi
          echo "BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_ENV
          
          # Check if current commit is tagged
          CURRENT_TAG=$(git tag --points-at HEAD | grep "^v" | head -1 || echo "")
          echo "CURRENT_TAG=$CURRENT_TAG" >> $GITHUB_ENV
          echo "IS_TAGGED=$([[ -n "$CURRENT_TAG" ]] && echo "true" || echo "false")" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Log in to Container Registry
        if: env.SHOULD_PUSH == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}
          flavor: |
            latest=false
          tags: |
            # Branch-based tags
            type=ref,event=branch
            type=ref,event=pr,prefix=pr-
            
            # Semantic versioning (from git tags)
            type=semver,pattern={{version}},enable=${{ env.IS_TAGGED == 'true' }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ env.IS_TAGGED == 'true' }}
            type=semver,pattern={{major}},enable=${{ env.IS_TAGGED == 'true' && env.MAJOR != '0' }}
            
            # Latest tags
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' && !contains(env.PRERELEASE, '-') }}
            type=raw,value=stable,enable=${{ github.event_name == 'release' && !contains(github.ref, '-') }}
            type=raw,value=edge,enable=${{ github.ref == 'refs/heads/develop' }}
            
            # SHA-based tags
            type=sha,prefix=sha-,format=short
            type=raw,value={{date 'YYYYMMDD'}}-${{ env.GIT_SHA }}
            
            # Branch with SHA
            type=raw,value=${{ env.BRANCH_NAME_CLEAN }}-${{ env.GIT_SHA }}
            
            # Version-based tags
            type=raw,value=${{ env.VERSION }}
            type=raw,value=${{ env.BUILD_TYPE }}
            type=raw,value=${{ env.BUILD_TYPE }}-${{ env.GIT_SHA }}
            
            # Feature branch tags
            type=raw,value=feature-${{ env.BRANCH_NAME_CLEAN }},enable=${{ startsWith(github.ref, 'refs/heads/feature/') }}
            
            # Special tags
            type=raw,value=canary,enable=${{ github.event.inputs.canary == 'true' }}
            type=raw,value=nightly,enable=${{ github.event_name == 'schedule' }}
            type=raw,value=nightly-{{date 'YYYYMMDD'}},enable=${{ github.event_name == 'schedule' }}
          
          labels: |
            org.opencontainers.image.title=ADRScan
            org.opencontainers.image.description=AI-powered Architecture Decision Record (ADR) management with ML-enhanced drift detection
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.vendor=PhotonDrift
            org.opencontainers.image.authors=tbowman01
            org.opencontainers.image.source=https://github.com/tbowman01/PhotonDrift
            org.opencontainers.image.documentation=https://github.com/tbowman01/PhotonDrift/blob/main/README.md
            
            # Build metadata
            build.timestamp=${{ env.BUILD_DATE }}
            build.version=${{ env.SEMVER }}
            build.commit=${{ env.GIT_SHA_FULL }}
            build.commit.short=${{ env.GIT_SHA }}
            build.branch=${{ env.BRANCH }}
            build.type=${{ env.BUILD_TYPE }}
            
            # Version info
            version.major=${{ env.MAJOR || '0' }}
            version.minor=${{ env.MINOR || '0' }}
            version.patch=${{ env.PATCH || '0' }}
            version.prerelease=${{ env.PRERELEASE || '' }}
            
            # Security
            security.scan=enabled
            security.nonroot=true

      # Unified build step with conditional behavior
      - name: Build container image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ github.event_name == 'pull_request' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}
          push: ${{ env.SHOULD_PUSH }}
          load: ${{ github.event_name == 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=${{ github.workflow }}
            ${{ env.SHOULD_PUSH == 'true' && format('type=registry,ref={0}/{1}:buildcache', env.REGISTRY, env.IMAGE_NAME_LOWER) || '' }}
          cache-to: |
            type=gha,mode=max,scope=${{ github.workflow }}
            ${{ env.SHOULD_PUSH == 'true' && format('type=registry,ref={0}/{1}:buildcache,mode=max', env.REGISTRY, env.IMAGE_NAME_LOWER) || '' }}
          build-args: |
            BUILD_DATE=${{ env.BUILD_DATE }}
            GIT_SHA=${{ env.GIT_SHA_FULL }}
            GIT_SHA_SHORT=${{ env.GIT_SHA }}
            GIT_REF=${{ env.GIT_REF }}
            VERSION=${{ env.VERSION }}
            SEMVER=${{ env.SEMVER }}
            BRANCH=${{ env.BRANCH }}
            BUILD_TYPE=${{ env.BUILD_TYPE }}
            GIT_REVISION=${{ env.GIT_SHA_FULL }}
            GITHUB_RUN_ID=${{ github.run_id }}
            TARGETPLATFORM=$TARGETPLATFORM
            TARGETARCH=$TARGETARCH
          provenance: ${{ env.SHOULD_PUSH }}
          sbom: ${{ env.SHOULD_PUSH }}

      # Enhanced binary verification with versioning checks
      - name: Verify container binary and versioning
        if: github.event_name == 'pull_request' || env.SHOULD_PUSH == 'true'
        run: |
          set -e
          # For PR builds, use the loaded image; for pushes, use registry tag
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Use the local loaded image for PR testing
            IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:${{ env.BUILD_TYPE }}-${{ env.GIT_SHA }}"
          else
            # Use the first available tag for registry pushes
            IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -1)
            IMAGE="$IMAGE_TAG"
          fi
          
          echo "🔍 Testing container: $IMAGE"
          
<<<<<<< HEAD
          # Basic functionality tests
          echo "Testing adrscan binary functionality..."
=======
          # Issue #87 - Explicit Docker Binary Verification Tests
          echo "=== Issue #87: Docker Binary Verification ==="
          
          # Acceptance Criteria 1: Does the ADRScan binary exist in the container?
          echo "1️⃣ Verifying ADRScan binary exists in container..."
          if docker run --rm "$IMAGE" test -f /usr/local/bin/adrscan; then
            echo "✅ PASS: ADRScan binary exists at /usr/local/bin/adrscan"
          else
            echo "❌ FAIL: ADRScan binary does not exist in container"
            exit 1
          fi
          
          # Additional verification that binary is executable
          if docker run --rm "$IMAGE" test -x /usr/local/bin/adrscan; then
            echo "✅ PASS: ADRScan binary is executable"
          else
            echo "❌ FAIL: ADRScan binary is not executable"
            exit 1
          fi
          
          # Acceptance Criteria 2: Does the ADRScan binary return the help menu when executed?
          echo "2️⃣ Verifying ADRScan binary returns help menu..."
          HELP_OUTPUT=$(docker run --rm "$IMAGE" adrscan --help 2>&1)
          if [[ $? -eq 0 ]]; then
            echo "✅ PASS: ADRScan --help command executed successfully"
            
            # Verify help output contains expected content
            if echo "$HELP_OUTPUT" | grep -q "Usage:"; then
              echo "✅ PASS: Help output contains 'Usage:' section"
            else
              echo "❌ FAIL: Help output missing 'Usage:' section"
              echo "Help output was: $HELP_OUTPUT"
              exit 1
            fi
            
            if echo "$HELP_OUTPUT" | grep -q "Commands:"; then
              echo "✅ PASS: Help output contains 'Commands:' section"
            else
              echo "⚠️ WARNING: Help output missing 'Commands:' section (may be expected)"
            fi
            
          else
            echo "❌ FAIL: ADRScan --help command failed"
            echo "Help output was: $HELP_OUTPUT"
            exit 1
          fi
          
          echo "✅ Issue #87 Acceptance Criteria: BOTH TESTS PASSED"
          echo ""
          
          # Additional comprehensive functionality tests
          echo "=== Additional Comprehensive Tests ==="
          echo "Version test:"
          docker run --rm "$IMAGE" --version || {
            echo "❌ Version command failed"
            exit 1
          }
          
          echo "Help test:"
          docker run --rm "$IMAGE" --help >/dev/null 2>&1 || {
            echo "❌ Help command failed"
            exit 1
          }
          # Verify binary location
          echo "Verifying binary exists at /usr/local/bin/adrscan..."
          BINARY_PATH=$(docker run --rm "$IMAGE" which adrscan)
          if [[ "$BINARY_PATH" == "/usr/local/bin/adrscan" ]]; then
            echo "✅ Binary correctly located at /usr/local/bin/adrscan"
          else
            echo "❌ Binary not at expected location. Found: $BINARY_PATH"
            exit 1
          fi
          
          # Verify version metadata in container
          echo "Checking version metadata..."
          CONTAINER_VERSION_OUTPUT=$(docker run --rm "$IMAGE" --version 2>&1)
          echo "Full version output: $CONTAINER_VERSION_OUTPUT"
          CONTAINER_VERSION=$(echo "$CONTAINER_VERSION_OUTPUT" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+[^[:space:]]*' || echo "unknown")
          echo "Extracted version: $CONTAINER_VERSION"
          echo "Expected version: ${{ env.VERSION }}"
          
          # Don't fail on version mismatch for now, just warn
          if [[ "$CONTAINER_VERSION" != "${{ env.VERSION }}" && "$CONTAINER_VERSION" != "unknown" ]]; then
            echo "⚠️ Version mismatch detected but continuing..."
          fi
          
          # Check environment variables
          echo "Verifying environment variables..."
          docker run --rm "$IMAGE" sh -c 'env | grep ADRSCAN_ || echo "No ADRSCAN environment variables found"'
          
          # Verify metadata files exist
          echo "Checking metadata files..."
          docker run --rm "$IMAGE" sh -c 'ls -la /etc/adrscan/ 2>/dev/null || echo "Metadata directory not found"'
          
          # Check container labels
          echo "Verifying container labels..."
          docker inspect "$IMAGE" | jq -r '.[0].Config.Labels' > labels.json 2>/dev/null || {
            echo "⚠️ Could not inspect image labels (may be expected for local builds)"
            touch labels.json
            echo '{}' > labels.json
          }
          
          # Verify required labels exist (non-blocking for local builds)
          REQUIRED_LABELS=("org.opencontainers.image.version" "build.commit" "build.timestamp")
          LABEL_ERRORS=0
          for label in "${REQUIRED_LABELS[@]}"; do
            if jq -e ".[\"$label\"]" labels.json >/dev/null 2>&1; then
              VALUE=$(jq -r ".[\"$label\"]" labels.json 2>/dev/null)
              echo "✅ Label $label: $VALUE"
            else
              echo "⚠️ Missing label: $label"
              LABEL_ERRORS=$((LABEL_ERRORS + 1))
            fi
          done
          
          if [[ $LABEL_ERRORS -gt 0 ]]; then
            echo "⚠️ Found $LABEL_ERRORS missing labels, but continuing (may be expected for PR builds)"
          fi
          
          # Verify non-root execution
          USER_ID=$(docker run --rm "$IMAGE" id -u)
          if [[ "$USER_ID" != "0" ]]; then
            echo "✅ Container runs as non-root user (UID: $USER_ID)"
          else
            echo "❌ Container running as root!"
            exit 1
          fi
          
          # Test basic ADR scanning capability
          echo "Testing basic ADR scanning functionality..."
          docker run --rm -v "$(pwd):/workspace:ro" "$IMAGE" scan --json /workspace >/dev/null 2>&1 || echo "⚠️ ADR scan test had issues (may be expected for test environment)"
          
          echo "✅ Container binary and versioning verification passed"

      # Security scan - runs on all builds
      - name: Security scan
        if: github.event_name == 'pull_request' || env.BUILD_TYPE == 'release'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags && fromJSON(format('["", "{0}"]', steps.meta.outputs.tags))[1] || format('{0}/{1}:{2}-{3}', env.REGISTRY, env.IMAGE_NAME_LOWER, env.BUILD_TYPE, env.GIT_SHA) }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload scan results
        if: (github.event_name == 'pull_request' || env.BUILD_TYPE == 'release') && always() && hashFiles('trivy-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      # Attestation - only for pushed images
      - name: Generate attestation
        if: env.SHOULD_PUSH == 'true' && steps.build.outputs.digest != ''
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      # Enhanced build summary with versioning information
      - name: Enhanced build summary
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🐳 Container Build Summary
          
          ## Build Information
          - **Type**: ${{ env.BUILD_TYPE }}
          - **Version**: \`${{ env.VERSION }}\`
          - **SemVer**: \`${{ env.SEMVER }}\`
          - **Platforms**: ${{ github.event_name == 'pull_request' && 'linux/amd64' || env.PLATFORMS }}
          - **Registry**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}\`
          - **Commit**: \`${{ env.GIT_SHA_FULL }}\`
          - **Branch**: \`${{ env.BRANCH }}\`
          - **Timestamp**: \`${{ env.BUILD_DATE }}\`
          - **Is Tagged**: \`${{ env.IS_TAGGED }}\`
          
          EOF
          
          if [[ "${{ env.SHOULD_PUSH }}" == "true" ]]; then
            cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🚀 Published Tags
          \`\`\`
          ${{ steps.meta.outputs.tags }}
          \`\`\`
          
          ## Image Digest
          \`\`\`
          ${{ steps.build.outputs.digest }}
          \`\`\`
          
          ## Pull Commands
          \`\`\`bash
          # By build type
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:${{ env.BUILD_TYPE }}
          
          # By version
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:${{ env.VERSION }}
          
          # By digest (immutable)
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}@${{ steps.build.outputs.digest }}
          
          # Specific architecture
          docker pull --platform linux/arm64 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:${{ env.BUILD_TYPE }}
          \`\`\`
          
          ## Verification Commands
          \`\`\`bash
          # Check version
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:${{ env.BUILD_TYPE }} --version
          
          # Inspect labels
          docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:${{ env.BUILD_TYPE }} | jq '.[0].Config.Labels'
          
          # Check environment variables
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:${{ env.BUILD_TYPE }} env | grep ADRSCAN_
          \`\`\`
          EOF
          else
            cat >> $GITHUB_STEP_SUMMARY << EOF
          ## ✅ Built Successfully (Not Published)
          
          The container was built locally for testing purposes.
          
          **Note**: Use \`docker pull\` commands above only if you have access to the local Docker daemon.
          EOF
          fi
