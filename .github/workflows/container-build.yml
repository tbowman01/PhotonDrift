name: Container Build and Publish

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Target platforms'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: string
      push_to_registry:
        description: 'Push to container registry'
        required: false
        default: 'true'
        type: boolean
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'Dockerfile'
      - '.dockerignore'
      - '.github/workflows/container-build.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Dockerfile'
      - '.dockerignore'
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Simplified platform configuration
  PLATFORMS: ${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}
  # Automatic push decision
  SHOULD_PUSH: ${{ github.event_name == 'release' || github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' && github.event.inputs.push_to_registry == 'true' }}

jobs:
  # Simplified single job with conditional steps
  build:
    name: Build Container
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
      attestations: write
      id-token: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup build environment
        id: setup
        run: |
          # Simplified environment setup
          echo "IMAGE_NAME_LOWER=${IMAGE_NAME,,}" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
          echo "GIT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV
          
          # Determine build type
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "BUILD_TYPE=test" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "BUILD_TYPE=release" >> $GITHUB_ENV
          else
            echo "BUILD_TYPE=edge" >> $GITHUB_ENV
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Log in to Container Registry
        if: env.SHOULD_PUSH == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}
          # Simplified tagging strategy
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ env.BUILD_TYPE }}
            type=raw,value=${{ env.BUILD_TYPE }}-${{ env.GIT_SHA }}

      # Unified build step with conditional behavior
      - name: Build container image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ github.event_name == 'pull_request' && 'linux/amd64' || env.PLATFORMS }}
          push: ${{ env.SHOULD_PUSH }}
          load: ${{ github.event_name == 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:buildcache
          cache-to: |
            type=gha,mode=max
            ${{ env.SHOULD_PUSH == 'true' && format('type=registry,ref={0}/{1}:buildcache,mode=max', env.REGISTRY, env.IMAGE_NAME_LOWER) || '' }}
          build-args: |
            BUILD_DATE=${{ env.BUILD_DATE }}
            GIT_SHA=${{ env.GIT_SHA }}
            VERSION=${{ steps.meta.outputs.version }}
          provenance: ${{ env.SHOULD_PUSH }}
          sbom: ${{ env.SHOULD_PUSH }}

      # Simplified test step - only runs on PRs
      - name: Test container
        if: github.event_name == 'pull_request'
        run: |
          set -e
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:${{ env.BUILD_TYPE }}-${{ env.GIT_SHA }}"
          
          # Quick smoke tests
          docker run --rm "$IMAGE" --version
          docker run --rm "$IMAGE" --help
          
          # Verify non-root execution
          [[ $(docker run --rm "$IMAGE" id -u) != "0" ]] || exit 1
          
          echo "âœ… Container tests passed"

      # Security scan - runs on all builds
      - name: Security scan
        if: github.event_name == 'pull_request' || env.BUILD_TYPE == 'release'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:${{ env.BUILD_TYPE }}-${{ env.GIT_SHA }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: ${{ github.event_name == 'pull_request' && '1' || '0' }}

      - name: Upload scan results
        if: (github.event_name == 'pull_request' || env.BUILD_TYPE == 'release') && always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      # Attestation - only for pushed images
      - name: Generate attestation
        if: env.SHOULD_PUSH == 'true' && steps.build.outputs.digest != ''
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      # Simplified summary
      - name: Build summary
        if: always()
        run: |
          if [[ "${{ env.SHOULD_PUSH }}" == "true" ]]; then
            echo "### ðŸš€ Container Published" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Registry:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}" >> $GITHUB_STEP_SUMMARY
            echo "**Tags:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
            echo "**Digest:** ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Pull with: \`docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:${{ env.BUILD_TYPE }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### âœ… Container Built (Not Published)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Type:** ${{ env.BUILD_TYPE }}" >> $GITHUB_STEP_SUMMARY
            echo "**Platforms:** ${{ github.event_name == 'pull_request' && 'linux/amd64' || env.PLATFORMS }}" >> $GITHUB_STEP_SUMMARY
          fi
