# Optimized multi-stage Dockerfile with improved caching and dynamic versioning
# Build arguments for flexibility and versioning
ARG RUST_VERSION=1.75
ARG ALPINE_VERSION=3.22

# Version and metadata build arguments
ARG VERSION="unknown"
ARG BUILD_DATE="unknown"
ARG GIT_SHA="unknown"
ARG GIT_SHA_SHORT="unknown"
ARG GIT_REF="unknown"
ARG BRANCH="unknown"
ARG BUILD_TYPE="unknown"
ARG SEMVER="unknown"
ARG GITHUB_RUN_ID="unknown"
ARG TARGETPLATFORM
ARG TARGETARCH

# ==== Dependencies Stage ====
# Cache dependencies separately for faster rebuilds
FROM rust:${RUST_VERSION}-alpine AS dependencies

# Install build dependencies once
RUN apk add --no-cache \
    musl-dev \
    pkgconfig \
    openssl-dev \
    openssl-libs-static

WORKDIR /build

# Copy only dependency files first
COPY Cargo.toml Cargo.lock* ./

# Create dummy project structure to cache dependencies
RUN mkdir src && \
    echo "fn main() {}" > src/main.rs && \
    echo "" > src/lib.rs && \
    cargo build --release && \
    rm -rf src

# ==== Builder Stage ====
FROM dependencies AS builder

# Copy actual source code
COPY src/ src/

# Build with cached dependencies and embed version metadata
RUN RUST_BACKTRACE=1 cargo build --release && \
    strip target/release/adrscan

# Create version metadata files
RUN echo "${VERSION}" > /tmp/version.txt && \
    echo "${BUILD_DATE}" > /tmp/build_date.txt && \
    echo "${GIT_SHA}" > /tmp/git_sha.txt && \
    echo "${BRANCH}" > /tmp/branch.txt

# ==== Runtime Stage ====
FROM alpine:${ALPINE_VERSION} AS runtime

# Comprehensive metadata arguments
ARG BUILD_DATE
ARG GIT_REVISION
ARG VERSION
ARG GIT_SHA
ARG GIT_SHA_SHORT
ARG GIT_REF
ARG BRANCH
ARG BUILD_TYPE
ARG SEMVER
ARG GITHUB_RUN_ID
ARG TARGETPLATFORM
ARG TARGETARCH

# Install runtime dependencies only
RUN apk add --no-cache ca-certificates && \
    adduser -D -u 65532 nonroot

# Copy binary from builder and verify it exists
COPY --from=builder ./target/release/adrscan /usr/local/bin/adrscan

# Create metadata directory and set permissions
RUN mkdir -p /etc/adrscan && \
    chmod 755 /etc/adrscan && \
    chmod 644 /etc/adrscan/* && \
    chmod +x /usr/local/bin/adrscan

# Copy version metadata files
COPY --from=builder /tmp/version.txt /etc/adrscan/version
COPY --from=builder /tmp/build_date.txt /etc/adrscan/build_date
COPY --from=builder /tmp/git_sha.txt /etc/adrscan/git_sha
COPY --from=builder /tmp/branch.txt /etc/adrscan/branch



# Switch to non-root user
USER 65532:65532
WORKDIR /workspace

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["/usr/local/bin/adrscan", "--version"]

# Set environment variables for runtime access
ENV ADRSCAN_VERSION="${VERSION}" \
    ADRSCAN_BUILD_DATE="${BUILD_DATE}" \
    ADRSCAN_COMMIT="${GIT_SHA}" \
    ADRSCAN_BRANCH="${BRANCH}" \
    ADRSCAN_BUILD_TYPE="${BUILD_TYPE}" \
    ADRSCAN_GITHUB_RUN_ID="${GITHUB_RUN_ID}" \
    ADRSCAN_PLATFORM="${TARGETPLATFORM}"

# Comprehensive metadata labels following OCI standards
LABEL org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${GIT_SHA}" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.title="ADRScan" \
      org.opencontainers.image.description="AI-powered ADR management with ML-enhanced drift detection" \
      org.opencontainers.image.vendor="PhotonDrift" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.source="https://github.com/tbowman01/photondrift" \
      org.opencontainers.image.documentation="https://github.com/tbowman01/photondrift/blob/main/README.md" \
      org.opencontainers.image.ref.name="${BRANCH}" \
      org.opencontainers.image.authors="tbowman01"

# Build Metadata Labels
LABEL build.timestamp="${BUILD_DATE}" \
      build.version="${SEMVER}" \
      build.commit="${GIT_SHA}" \
      build.commit.short="${GIT_SHA_SHORT}" \
      build.branch="${BRANCH}" \
      build.type="${BUILD_TYPE}" \
      build.ref="${GIT_REF}" \
      build.github_run_id="${GITHUB_RUN_ID}" \
      build.platform="${TARGETPLATFORM}" \
      build.arch="${TARGETARCH}"

# Security Labels
LABEL security.scan="enabled" \
      security.distroless="false" \
      security.nonroot="true" \
      security.readonly.rootfs="false"

# Application Labels
LABEL app.name="adrscan" \
      app.component="cli" \
      app.part-of="photondrift" \
      app.managed-by="github-actions"

ENTRYPOINT ["/usr/local/bin/adrscan"]
CMD ["--help"]